<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>titaneric - Learning</title>
      <link>https://www.titaneric.com</link>
      <description></description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="https://www.titaneric.com/categories/learning/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Wed, 18 Jun 2025 00:00:00 +0000</lastBuildDate>
      <item>
          <title>Grafana Loki系列文章(II) - Loki寫入及讀取性能調校</title>
          <pubDate>Wed, 18 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://www.titaneric.com/posts/grafana-loki-upgrade-2-zh/</link>
          <guid>https://www.titaneric.com/posts/grafana-loki-upgrade-2-zh/</guid>
          <description xml:base="https://www.titaneric.com/posts/grafana-loki-upgrade-2-zh/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;7ebbf0334cc14d71818a451b89847db8.png?updatedAt=1739524743000&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;em&gt;&lt;p style=&quot;text-align:center&quot;&gt;Generated by Microsoft Designer&lt;&#x2F;p&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bei-jing&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#bei-jing&quot; aria-label=&quot;Anchor link for: bei-jing&quot;&gt;背景&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在&lt;a href=&quot;https:&#x2F;&#x2F;www.titaneric.com&#x2F;posts&#x2F;grafana-loki-upgrade-1-zh&#x2F;&quot;&gt;前一篇Loki系列文章&lt;&#x2F;a&gt;中，提到我們利用金絲雀部署的方式，利用Vector複製真實環境的log送往新版Loki，在此同時調整Loki config進行效能調校，直到結果滿意之後，再開放給團隊使用。
因為我們的Loki是使用分散式模式部署，涉及多個功能不同的component，使得Loki架構非常複雜，在調整細項config之前，要非常清楚了解各個component間的關係，才能依序並且合理的調整config。&lt;&#x2F;p&gt;
&lt;p&gt;在調教Loki時，可以先針對&lt;strong&gt;寫入&lt;&#x2F;strong&gt;相關的component做調整，例如ingester及distributor，甚至是在前一篇文章中的提及的log collector，目標是&lt;strong&gt;讓寫入的chunk的Flush Reason盡可能是Full，避免碎片化chunk&lt;&#x2F;strong&gt;的問題。不僅能夠在空間上更有效率的存放，也同時能夠間接的影響query速度。&lt;&#x2F;p&gt;
&lt;p&gt;原因是相比於碎片化的chunk，滿載的chunk代表我們僅需更少數量的chunk，就能表示相同的log量，最終導致Loki在建立chunk的index也跟著減少。在查詢這些log時，Loki會依照query內容去查index，因為查到index後得知這些chunk數量是少的，也就花費更少的時間讀取chunk內容，讓querier可以專注在執行面，減少整體query時間開銷。&lt;&#x2F;p&gt;
&lt;p&gt;所以，我們花費大量的時間調校Loki的寫入效能，進而調整讀取效能，以下文章會分別針對寫入以及讀取，詳細說明各項config調整內容。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;loki-write-configdiao-zheng&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#loki-write-configdiao-zheng&quot; aria-label=&quot;Anchor link for: loki-write-configdiao-zheng&quot;&gt;Loki write config調整&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;ingester&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ingester&quot; aria-label=&quot;Anchor link for: ingester&quot;&gt;&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;configure&#x2F;#ingester&quot;&gt;ingester&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;ingester.chunk-encoding&lt;&#x2F;code&gt;：直接設定成&lt;code&gt;snappy&lt;&#x2F;code&gt;，跟&lt;code&gt;gzip&lt;&#x2F;code&gt;相比雖然不是最大的壓縮比，但是速度較快，壓縮比也還能接受，&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;configure&#x2F;bp-configure&#x2F;#use-snappy-compression-algorithm&quot;&gt;官方config&lt;&#x2F;a&gt;以及&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;blog&#x2F;2023&#x2F;12&#x2F;28&#x2F;the-concise-guide-to-loki-how-to-get-the-most-out-of-your-query-performance&#x2F;&quot;&gt;官方blog&lt;&#x2F;a&gt;也推薦使用。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;shard-streams.enabled&lt;&#x2F;code&gt;：在調整Loki labels後，stream數量會變少，但是每一條stream的log量會變大，可能會超過&lt;code&gt;ingester.per-stream-rate-limit&lt;&#x2F;code&gt;限制造成rate limit。開啟這個參數以後，如果某一條stream量超過&lt;code&gt;shard-streams.desired-rate&lt;&#x2F;code&gt;，會被分成多個stream shard，distributor會自動為這些stream shard加上&lt;code&gt;__stream_shard__&lt;&#x2F;code&gt; label，邏輯上會變成不同的stream，讓ingester有能力消化這些log。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;ingester.per-stream-rate-limit&lt;&#x2F;code&gt;：如果開啟&lt;code&gt;shard-streams.enabled&lt;&#x2F;code&gt;還是會碰到rate limit，在ingester資源充足前提下，可以上調這個數值。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;distributor.ingestion-rate-limit-mb&lt;&#x2F;code&gt;：可以參考&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;grafana&#x2F;loki&#x2F;blob&#x2F;main&#x2F;production&#x2F;loki-mixin-compiled&#x2F;dashboards&#x2F;loki-operational.json&quot;&gt;Loki Operational Dashboard&lt;&#x2F;a&gt;中MBs Per Tenant Panel裡的語法，並使用PromQL加總每一個tenant的log量，進而計算出合理的全局rate limit，&lt;code&gt;distributor.ingestion-burst-size-mb&lt;&#x2F;code&gt;需要也可以一併更新。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;9d552b04f6b44e3c87479a629f9cef4d.png?updatedAt=1750326304000&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;ingester.max-chunk-age&lt;&#x2F;code&gt;：雖然&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;blog&#x2F;2021&#x2F;02&#x2F;16&#x2F;the-essential-config-settings-you-should-use-so-you-wont-drop-logs-in-loki&#x2F;&quot;&gt;官方blog&lt;&#x2F;a&gt;曾建議將這個數值設定成&lt;code&gt;2h&lt;&#x2F;code&gt;，不過按照前一篇提及的方法調整過Loki labels後，我們將這數值上調到&lt;code&gt;4h&lt;&#x2F;code&gt;。同時，&lt;code&gt;ingester.chunks-idle-period&lt;&#x2F;code&gt;也調整成&lt;code&gt;4h&lt;&#x2F;code&gt;。我們刻意多等待2小時，讓一次性任務或是排程的log streams能利用這段時間寫到相同的chunk，讓Chunk Flush Reason更有機會從&lt;strong&gt;max age&lt;&#x2F;strong&gt;轉成&lt;strong&gt;full&lt;&#x2F;strong&gt;。另一個帶來的效益是如同&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;blog&#x2F;2024&#x2F;01&#x2F;04&#x2F;the-concise-guide-to-loki-how-to-work-with-out-of-order-and-older-logs&#x2F;&quot;&gt;官方 blog&lt;&#x2F;a&gt;提及的，我們能接受更早的out-of-order ingestion，這對我們非常有幫助，如果我們在Vector config有瑕疵，誤送一些錯誤處理的log到Loki去，多出來的這段時間能幫助我們排障，即時處理完後讓Loki不要因為out-of-order拒絕接受log。最後，雖然上調這個參數會小幅度的增加ingester記憶體使用，但這遠小於調整Loki labels節省的量，所以是可以接受的。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;ingester.readiness-check-ring-health&lt;&#x2F;code&gt;：如果ingester的replica一多，在重啟 ingester statefulset時候預設會去檢查ingester ring上的健康程度，這時光是等待單顆ingester可能就消耗10分鐘，可以考慮將這數值改成false，僅檢查ingester自己的健康狀態，減少等待時間到&lt;strong&gt;2分鐘&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;distributor.zone-awareness-enabled&lt;&#x2F;code&gt;：這個參數已經在&lt;code&gt;grafana&#x2F;loki&lt;&#x2F;code&gt; helm chart的&lt;code&gt;ingester.zoneAwareReplication&lt;&#x2F;code&gt;有良好的封裝。如同以下例子，只要指定ingester的replica數量以及affinity，就能將不同的ingester&lt;strong&gt;平均&lt;&#x2F;strong&gt;部到不同的AZ，達成更高可用性的寫入。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;ingester&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;12
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;zoneAwareReplication&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;zoneA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;extraAffinity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;nodeAffinity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;requiredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;nodeSelectorTerms&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;matchExpressions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;nodepool
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;operator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;In
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;loki
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;availability-zone
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;operator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;In
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;az-1
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;zoneB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;..
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;zoneC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;..
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;distributor&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#distributor&quot; aria-label=&quot;Anchor link for: distributor&quot;&gt;&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;configure&#x2F;#distributor&quot;&gt;distributor&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;distributor.client-cleanup-period&lt;&#x2F;code&gt;：在&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;get-started&#x2F;components&#x2F;#rate-limiting&quot;&gt;Loki架構&lt;&#x2F;a&gt;中，distributor會每隔一段時間，向ingester要每一條stream的log量，當作rate limit的參考。另外，distributor會每隔&lt;code&gt;distributor.client-cleanup-period&lt;&#x2F;code&gt;進行client的更新，移除不存在的ingester連線。在重啟ingester過程中，distributor如果沒有即時更新ingester連線，就有可能會誤送log給不存在的ingester。可以考慮縮減這段時間，更快移除這些不健康的連線避免錯誤。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;distributor.rate-store.ingester-request-timeout&lt;&#x2F;code&gt;：如果因為網路的不穩定，造成distributor向ingester的請求時間較長造成timeout，可以稍微增加這個數值，避免distributor發生錯誤。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;loki-read-configdiao-zheng&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#loki-read-configdiao-zheng&quot; aria-label=&quot;Anchor link for: loki-read-configdiao-zheng&quot;&gt;Loki read config調整&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;querier&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#querier&quot; aria-label=&quot;Anchor link for: querier&quot;&gt;&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;configure&#x2F;#querier&quot;&gt;querier&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;關於Loki querier的調整可以直接參考&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;blog&#x2F;2023&#x2F;12&#x2F;28&#x2F;the-concise-guide-to-loki-how-to-get-the-most-out-of-your-query-performance&#x2F;&quot;&gt;官方blog&lt;&#x2F;a&gt;的詳細說明，作者特別使用精美的動畫說明querier相關的參數是如何影響query行為，也提供了各類metrics幫助Loki管理者發現當前問題。&lt;&#x2F;p&gt;
&lt;p&gt;在blog中，我覺得對調整最有幫助的是以下的LogQL語法(已依據使用情境做些調整)。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;{component=&amp;quot;querier&amp;quot;, cluster=&amp;quot;$cluster&amp;quot;, namespace=&amp;quot;$namespace&amp;quot;} 
&lt;&#x2F;span&gt;&lt;span&gt;  |= &amp;quot;metrics.go&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;  | logfmt
&lt;&#x2F;span&gt;&lt;span&gt;  | latency=&amp;quot;slow&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  | query_type=&amp;quot;metric&amp;quot; or query_type=&amp;quot;filter&amp;quot; or query_type=&amp;quot;limited&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  | label_format 
&lt;&#x2F;span&gt;&lt;span&gt;      duration_s=`{{.duration | duration}}`,
&lt;&#x2F;span&gt;&lt;span&gt;      queue_time_s=`{{.queue_time | duration}}`,
&lt;&#x2F;span&gt;&lt;span&gt;      chunk_refs_s=`{{.chunk_refs_fetch_time | duration}}`,
&lt;&#x2F;span&gt;&lt;span&gt;      chunk_total_s=`{{.store_chunks_download_time | duration}}`,
&lt;&#x2F;span&gt;&lt;span&gt;      cache_download_chunk_s=`{{.cache_chunk_download_time | duration}}`
&lt;&#x2F;span&gt;&lt;span&gt;  | label_format total_time_s=`{{addf .queue_time_s .duration_s}}`
&lt;&#x2F;span&gt;&lt;span&gt;  | label_format        
&lt;&#x2F;span&gt;&lt;span&gt;      queue_pct=`{{mulf (divf .queue_time_s .total_time_s) 100 }}`,
&lt;&#x2F;span&gt;&lt;span&gt;      index_pct=`{{mulf (divf (.chunk_refs_fetch_time | duration) .total_time_s) 100 }}`,
&lt;&#x2F;span&gt;&lt;span&gt;      chunks_pct=`{{mulf (divf .chunk_total_s .total_time_s) 100}}`,
&lt;&#x2F;span&gt;&lt;span&gt;      execution_pct=`{{mulf (divf (subf .duration_s .chunk_refs_s .chunk_total_s) .total_time_s) 100}}`,
&lt;&#x2F;span&gt;&lt;span&gt;      cache_download_pct=`{{mulf (divf .cache_download_chunk_s .chunk_total_s) 100}}`,
&lt;&#x2F;span&gt;&lt;span&gt;      avg_chunk_size=`{{divf (divf (bytes .total_bytes) .cache_chunk_req 1000)}}`
&lt;&#x2F;span&gt;&lt;span&gt;  | line_format `| total_time {{printf &amp;quot;%3.0f&amp;quot; (.total_time_s | float64)}}s | queued {{printf &amp;quot;%3.0f&amp;quot; (.queue_pct | float64)}}% | execution {{printf &amp;quot;%3.0f&amp;quot; (.execution_pct | float64)}}% | index {{printf &amp;quot;%3.0f&amp;quot; (.index_pct | float64)}}% | store {{printf &amp;quot;%3.0f&amp;quot; (.chunks_pct | float64)}}% (cache {{ printf &amp;quot;%3.0f&amp;quot; (.cache_download_pct | float64) }}%) | avg_chunk {{printf &amp;quot;%3.0f&amp;quot; (.avg_chunk_size | float64)}}kB | {{ .query }}`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;他會呈現發生slow query（執行時間大於10秒）時，querier在執行subquery時，在4個不同的phase所花費的時間:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;queued&lt;&#x2F;strong&gt;：在queue中等待的時間&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;index&lt;&#x2F;strong&gt;：根據Loki label查index花費時間&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;store&lt;&#x2F;strong&gt;：拿到index後，從cache或object storage拿chunk時間&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;execution&lt;&#x2F;strong&gt;：取得chunk後，在querier中執行的時間&lt;&#x2F;p&gt;
&lt;p&gt;我們應盡可能讓&lt;strong&gt;execution&lt;&#x2F;strong&gt;比率愈高愈好（超過80%），因為這代表querier真正花費CPU時間計算結果，而不是在等待IO，如果發現query時間花在其他的phase，blog也有提到如何做對應的調整，在此不再贅述。&lt;&#x2F;p&gt;
&lt;p&gt;除此之外，我們特別調整&lt;strong&gt;store&lt;&#x2F;strong&gt;的呈現，多一個&lt;strong&gt;cache&lt;&#x2F;strong&gt;代表querier在拿chunk時，在cache中花費的時間，這個比率應該盡可能接近100%，代表拿chunk的時間主要花費在更快的cache，而不是慢得多的object storage。這對我們非常有幫助，讓我們發現先前的chunk cache是非常沒有效率的，需要額外調校，在之後會說明。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chunk-cache&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chunk-cache&quot; aria-label=&quot;Anchor link for: chunk-cache&quot;&gt;&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;configure&#x2F;#chunk_store_config&quot;&gt;chunk cache&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;如果有讀過&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;blog&#x2F;2023&#x2F;08&#x2F;23&#x2F;how-we-scaled-grafana-cloud-logs-memcached-cluster-to-50tb-and-improved-reliability&#x2F;&quot;&gt;這篇官方blog&lt;&#x2F;a&gt;，一定會覺得如果Loki的chunk cache改成Memcached，並使用&lt;code&gt;extstore&lt;&#x2F;code&gt;掛載快速的SSD，能用更多的空間以及相對便宜的成本，為Loki query帶來極高的效能。我們也像文章中一樣嘗試計算現有的LogQL查詢區間熱區，文章中並沒有提及實際的query語法，不過我們是使用以下LogQL搭配熱力圖呈現。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;sum_over_time({cluster=&amp;quot;$cluster&amp;quot;, namespace=&amp;quot;$namespace&amp;quot;, app=&amp;quot;loki&amp;quot;, component=&amp;quot;query-frontend&amp;quot;} |= &amp;quot;metrics.go&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;  |= &amp;quot;query_type&amp;quot; | logfmt | query_type=&amp;quot;metric&amp;quot; or query_type=&amp;quot;filter&amp;quot; or query_type=&amp;quot;limited&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;  | unwrap duration(start_delta)[5m])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;由下圖可以看到，大部分的查詢區間都落在過去9小時以內。在討論後我們最後決定cache應至少能保留過去一天的chunk，進而計算cache需要的空間。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;8df2bccc2f424c3e9be76978042895e2.png?updatedAt=1750326446000&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;當時我們舊的Loki是使用Redis當作chunk cache，剛好目前的&lt;code&gt;grafana&#x2F;loki&lt;&#x2F;code&gt; helm chart已經針對Memcached有良好封裝，我們決定直接為新的Loki套用這些設定。然而，我們發現結果不如預期。&lt;&#x2F;p&gt;
&lt;p&gt;利用前述的LogQL語法，我們發現querier花了30%以上的時間在&lt;strong&gt;store&lt;&#x2F;strong&gt; phase，而且我們特別新增的&lt;strong&gt;cache&lt;&#x2F;strong&gt; phase比率不到50%，這代表我們不僅花費時間在等待chunk下載，而且在cache以及object storage都耗費了大量時間。這與我們預期的接近100% &lt;strong&gt;cache&lt;&#x2F;strong&gt; phase比率及極少的&lt;strong&gt;store&lt;&#x2F;strong&gt; phase比率大相徑庭。&lt;&#x2F;p&gt;
&lt;p&gt;在&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;community.grafana.com&#x2F;t&#x2F;enabling-loki-jaeger-tracing&#x2F;51483&quot;&gt;開啟Loki的Jaeger tracing功能&lt;&#x2F;a&gt;以後，我們發現querier光是拿chunk cache花了超過10s，再加上&lt;strong&gt;execution&lt;&#x2F;strong&gt; phase所花費時間，經常會遇到timeout問題。&lt;&#x2F;p&gt;
&lt;p&gt;我們最終很幸運地在&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;memcached&#x2F;memcached&#x2F;wiki&#x2F;ConfiguringLokiExtstore&quot;&gt;memcached官方GitHub&lt;&#x2F;a&gt;找到解方，以下是官方建議的memcached設定：
讓&lt;code&gt;ingester.chunk-target-size&lt;&#x2F;code&gt; 以及在memcached的max item size (&lt;code&gt;-I&lt;&#x2F;code&gt;參數)不要太大，可以設定成&lt;code&gt;2MB&lt;&#x2F;code&gt;，同時在memcached加上extstore特別的參數。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;memcached&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -m&lt;&#x2F;span&gt;&lt;span&gt; 6000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -I&lt;&#x2F;span&gt;&lt;span&gt; 2m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;	-o&lt;&#x2F;span&gt;&lt;span&gt; ext_path=&#x2F;disk&#x2F;extstore:500G,ext_wbuf_size=32,ext_threads=10,ext_max_sleep=10000,slab_automove_freeratio=0.10,ext_recache_rate=0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;另外在loki設定中，應設定不大的batch size及parallelism，並且拉高timeout。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;store.chunks-cache.memcached.batchsize&lt;&#x2F;code&gt;意思是memcached client一次拿多少個memcached keys，可以設定成memcached server的2倍數量。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;store.chunks-cache.memcached.parallelism&lt;&#x2F;code&gt;目的是同時有多少的go routine是取得memcached keys，盡可能設定愈低的值，但如果網路頻寬允許的話可以拉高。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;store.chunks-cache.memcached.timeout&lt;&#x2F;code&gt;的時間包含memcached拿cache，以及serialization的時間，如果chunk的item size一大，或是batch size大的話會影響timeout時間。預設是&lt;code&gt;100ms&lt;&#x2F;code&gt;但強烈建議調整成較高的值例如&lt;code&gt;60s&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Loki&#x27;s memcache client timeout is measuring the amount of time to &lt;em&gt;fetch and read and process the entire batch of keys from each host&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;code&gt;store.background.write-back-concurrency&lt;&#x2F;code&gt;代表寫入memcached的go routine數量，建議調整成1，避免太積極地寫入memcached，造成一些item被evict。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;chunk_store_config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;chunk_cache_config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;memcached&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;batch_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;parallelism&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;memcached_client&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;addresses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;127.0.0.1:11211
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;timeout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;60s
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;background&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;writeback_goroutines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;writeback_buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1000
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;writeback_size_limit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;500MB
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;cheng-guo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#cheng-guo&quot; aria-label=&quot;Anchor link for: cheng-guo&quot;&gt;成果&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;write-performance&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#write-performance&quot; aria-label=&quot;Anchor link for: write-performance&quot;&gt;Write performance&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在下圖中，可以看到因為ingester在寫入log效能足夠，搭配適當的調節distributor的rate limit以及shard-streams，讓Loki不再因為rate limit問題，在distributor端拋棄送進來的log。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;9b3cf57812b44d2dab95e0dc953a2047.png?updatedAt=1750326529000&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;query-performance&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#query-performance&quot; aria-label=&quot;Anchor link for: query-performance&quot;&gt;Query performance&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;下圖是在前面的介紹到修改過後的官方LogQL執行結果，可以看到就算是slow subquery的執行，在&lt;strong&gt;execution&lt;&#x2F;strong&gt; phase執行時間佔比還是高達90%以上，而且在&lt;strong&gt;cache&lt;&#x2F;strong&gt;部分的佔比，更高達95%以上，這印證了chunk主要從cache中拿到，省下來的時間可以執行計算LogQL最後結果。&lt;&#x2F;p&gt;
&lt;p&gt;事實上在&lt;strong&gt;execution&lt;&#x2F;strong&gt; phase還有調整的空間，有機會透過增加querier replicas數量、調升CPU資源或是改善LogQL語法來更近一步加速搜尋時間。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;0bd7beb9a0124ea0bda1d474e06d1577.png?updatedAt=1750326541000&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;下方是query花費時間隨時間的關係圖。黃線是第99百分位、橘線是第90百分位。可以看到query時間絕大部分都少於10s。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;2596fdc70a26474ab054f0f1e2713906.png?updatedAt=1750326553000&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cache-performance&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#cache-performance&quot; aria-label=&quot;Anchor link for: cache-performance&quot;&gt;Cache performance&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在chunk cache部分，hit rate大部分時間都維持70%以上，這樣Loki可以避免再向慢得多的Object Storage拿需要的chunk，也減輕Object Storage的負擔。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;5b6c5c0beb504dceb2a4d8e3de6fe7af.png?updatedAt=1750326563000&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jie-lun&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#jie-lun&quot; aria-label=&quot;Anchor link for: jie-lun&quot;&gt;結論&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在這篇文章中，我們將重點著重在Loki的config調整。先是說明為何應該優先調整寫入效能，因為會連帶影響讀取效能。再帶到在Loki中負責寫入以及讀取的component細節config設定。過程中特別感謝Grafana以及Memcached提供的技術文章，提供給我們調整上的指引。&lt;&#x2F;p&gt;
&lt;p&gt;最後的成效是在寫入時，能盡可能接收log collector送來的log，在查詢上也能充分應用cache，減少Object Storage負擔，效果是令人滿意的。我們今後也會持續針對log collector以及Loki效能做精進，提供Loki的使用者更好的使用者體驗。&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Grafana Loki Series (II) - Tuning Loki Write and Read Performance</title>
          <pubDate>Wed, 18 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://www.titaneric.com/posts/grafana-loki-upgrade-2/</link>
          <guid>https://www.titaneric.com/posts/grafana-loki-upgrade-2/</guid>
          <description xml:base="https://www.titaneric.com/posts/grafana-loki-upgrade-2/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;7ebbf0334cc14d71818a451b89847db8.png?updatedAt=1739524743000&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;em&gt;&lt;p style=&quot;text-align:center&quot;&gt;Generated by Microsoft Designer&lt;&#x2F;p&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;background&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#background&quot; aria-label=&quot;Anchor link for: background&quot;&gt;Background&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In the &lt;a href=&quot;https:&#x2F;&#x2F;www.titaneric.com&#x2F;posts&#x2F;grafana-loki-upgrade-1&#x2F;&quot;&gt;previous Loki article&lt;&#x2F;a&gt;, we discussed using canary deployments with Vector to replicate real-world logs to a new Loki version. During this process, we tuned the Loki configuration for optimal performance. Once satisfied with the results, we rolled it out to the team.&lt;&#x2F;p&gt;
&lt;p&gt;Our Loki deployment uses a distributed mode, involving multiple components with distinct functions. This makes the Loki architecture complex. Before adjusting specific configurations, it&#x27;s crucial to understand the relationships between these components to make informed decisions.&lt;&#x2F;p&gt;
&lt;p&gt;When tuning Loki, start with the &lt;strong&gt;write&lt;&#x2F;strong&gt;-related components, such as the ingester and distributor, and even the log collector mentioned in the previous article. The goal is to &lt;strong&gt;maximize &quot;Full&quot; Flush Reasons for written chunks, minimizing chunk fragmentation.&lt;&#x2F;strong&gt; This not only improves storage efficiency but also indirectly enhances query speed.&lt;&#x2F;p&gt;
&lt;p&gt;Full chunks mean fewer chunks are needed to represent the same volume of logs. This reduces the number of indexes Loki needs to create. When querying, Loki searches the index based on the query content. Fewer chunks associated with an index result in faster chunk retrieval, allowing the querier to focus on execution and reducing overall query time.&lt;&#x2F;p&gt;
&lt;p&gt;Therefore, we invested significant time in optimizing Loki&#x27;s write performance, which in turn improved read performance. The following sections detail the configuration adjustments we made for both write and read operations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;loki-write-config-tuning&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#loki-write-config-tuning&quot; aria-label=&quot;Anchor link for: loki-write-config-tuning&quot;&gt;Loki Write Config Tuning&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;ingester&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ingester&quot; aria-label=&quot;Anchor link for: ingester&quot;&gt;&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;configure&#x2F;#ingester&quot;&gt;Ingester&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;ingester.chunk-encoding&lt;&#x2F;code&gt;: Set this directly to &lt;code&gt;snappy&lt;&#x2F;code&gt;. While not the highest compression ratio compared to &lt;code&gt;gzip&lt;&#x2F;code&gt;, it offers a good balance of speed and compression. The &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;configure&#x2F;bp-configure&#x2F;#use-snappy-compression-algorithm&quot;&gt;official configuration&lt;&#x2F;a&gt; and &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;blog&#x2F;2023&#x2F;12&#x2F;28&#x2F;the-concise-guide-to-loki-how-to-get-the-most-out-of-your-query-performance&#x2F;&quot;&gt;official blog&lt;&#x2F;a&gt; also recommend using it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;shard-streams.enabled&lt;&#x2F;code&gt;: After adjusting Loki labels, the number of streams may decrease, but the log volume per stream may increase, potentially exceeding the &lt;code&gt;ingester.per-stream-rate-limit&lt;&#x2F;code&gt;. Enabling this parameter splits streams exceeding &lt;code&gt;shard-streams.desired-rate&lt;&#x2F;code&gt; into multiple stream shards. The distributor automatically adds the &lt;code&gt;__stream_shard__&lt;&#x2F;code&gt; label to these shards, effectively creating distinct streams that the ingester can handle.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;ingester.per-stream-rate-limit&lt;&#x2F;code&gt;: If rate limiting persists even with &lt;code&gt;shard-streams.enabled&lt;&#x2F;code&gt;, increase this value, provided the ingester has sufficient resources.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;distributor.ingestion-rate-limit-mb&lt;&#x2F;code&gt;: Use the PromQL syntax from the &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;grafana&#x2F;loki&#x2F;blob&#x2F;main&#x2F;production&#x2F;loki-mixin-compiled&#x2F;dashboards&#x2F;loki-operational.json&quot;&gt;Loki Operational Dashboard&lt;&#x2F;a&gt; (MBs Per Tenant Panel) to sum the log volume for each tenant and calculate a reasonable global rate limit. Update &lt;code&gt;distributor.ingestion-burst-size-mb&lt;&#x2F;code&gt; accordingly.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;9d552b04f6b44e3c87479a629f9cef4d.png?updatedAt=1750326304000&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;ingester.max-chunk-age&lt;&#x2F;code&gt;: Although the &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;blog&#x2F;2021&#x2F;02&#x2F;16&#x2F;the-essential-config-settings-you-should-use-so-you-wont-drop-logs-in-loki&#x2F;&quot;&gt;official blog&lt;&#x2F;a&gt; suggests setting this to &lt;code&gt;2h&lt;&#x2F;code&gt;, we increased it to &lt;code&gt;4h&lt;&#x2F;code&gt; after adjusting Loki labels as described in the previous article. We also adjusted &lt;code&gt;ingester.chunks-idle-period&lt;&#x2F;code&gt; to &lt;code&gt;4h&lt;&#x2F;code&gt;. This extra time allows logs from one-off tasks or scheduled jobs to be written to the same chunk, increasing the likelihood of a &quot;full&quot; Chunk Flush Reason instead of &quot;max age&quot;. Another benefit, as mentioned in &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;blog&#x2F;2024&#x2F;01&#x2F;04&#x2F;the-concise-guide-to-loki-how-to-work-with-out-of-order-and-older-logs&#x2F;&quot;&gt;official blog&lt;&#x2F;a&gt;, is that we can tolerate older out-of-order ingestion. This is helpful if there are misconfigurations in Vector, mistakenly sending error-handling logs to Loki. The extra time allows us to troubleshoot and resolve the issue, preventing Loki from rejecting logs due to out-of-order ingestion. While increasing this parameter slightly increases ingester memory usage, it&#x27;s less than the memory saved by adjusting Loki labels, making it an acceptable trade-off.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;ingester.readiness-check-ring-health&lt;&#x2F;code&gt;: With multiple ingester replicas, restarting the ingester statefulset defaults to checking the health of the ingester ring, which can take up to 10 minutes per ingester. Consider setting this to &lt;code&gt;false&lt;&#x2F;code&gt; to only check the health of the ingester itself, reducing the waiting time to &lt;strong&gt;2 minutes&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;distributor.zone-awareness-enabled&lt;&#x2F;code&gt;: This parameter is well-encapsulated in the &lt;code&gt;grafana&#x2F;loki&lt;&#x2F;code&gt; helm chart&#x27;s &lt;code&gt;ingester.zoneAwareReplication&lt;&#x2F;code&gt;. As shown below, specifying the number of ingester replicas and affinity allows you to deploy different ingesters &lt;strong&gt;evenly&lt;&#x2F;strong&gt; across different AZs, achieving higher write availability.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;ingester&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;12
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;zoneAwareReplication&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;zoneA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;extraAffinity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;nodeAffinity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;requiredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;nodeSelectorTerms&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;matchExpressions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;nodepool
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;operator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;In
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;loki
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;availability-zone
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;operator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;In
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;az-1
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;zoneB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;..
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;zoneC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;..
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;distributor&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#distributor&quot; aria-label=&quot;Anchor link for: distributor&quot;&gt;&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;configure&#x2F;#distributor&quot;&gt;Distributor&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;distributor.client-cleanup-period&lt;&#x2F;code&gt;: In the &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;get-started&#x2F;components&#x2F;#rate-limiting&quot;&gt;Loki architecture&lt;&#x2F;a&gt;, the distributor periodically requests the log volume of each stream from the ingester as a rate limit reference. Additionally, the distributor updates clients every &lt;code&gt;distributor.client-cleanup-period&lt;&#x2F;code&gt;, removing non-existent ingester connections. During ingester restarts, if the distributor doesn&#x27;t update connections promptly, it may mistakenly send logs to non-existent ingesters. Consider reducing this period to remove unhealthy connections faster and prevent errors.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;distributor.rate-store.ingester-request-timeout&lt;&#x2F;code&gt;: If network instability causes long request times from the distributor to the ingester, resulting in timeouts, slightly increase this value to prevent distributor errors.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;loki-read-config-tuning&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#loki-read-config-tuning&quot; aria-label=&quot;Anchor link for: loki-read-config-tuning&quot;&gt;Loki Read Config Tuning&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;querier&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#querier&quot; aria-label=&quot;Anchor link for: querier&quot;&gt;&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;configure&#x2F;#querier&quot;&gt;Querier&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Refer to the &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;blog&#x2F;2023&#x2F;12&#x2F;28&#x2F;the-concise-guide-to-loki-how-to-get-the-most-out-of-your-query-performance&#x2F;&quot;&gt;official blog&lt;&#x2F;a&gt; for detailed information on Loki querier tuning. The author uses excellent animations to illustrate how querier-related parameters affect query behavior and provides various metrics to help Loki administrators identify current issues.&lt;&#x2F;p&gt;
&lt;p&gt;The following LogQL syntax (adjusted for our use case) was particularly helpful for tuning:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;{component=&amp;quot;querier&amp;quot;, cluster=&amp;quot;$cluster&amp;quot;, namespace=&amp;quot;$namespace&amp;quot;} 
&lt;&#x2F;span&gt;&lt;span&gt;  |= &amp;quot;metrics.go&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;  | logfmt
&lt;&#x2F;span&gt;&lt;span&gt;  | latency=&amp;quot;slow&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  | query_type=&amp;quot;metric&amp;quot; or query_type=&amp;quot;filter&amp;quot; or query_type=&amp;quot;limited&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  | label_format 
&lt;&#x2F;span&gt;&lt;span&gt;      duration_s=`{{.duration | duration}}`,
&lt;&#x2F;span&gt;&lt;span&gt;      queue_time_s=`{{.queue_time | duration}}`,
&lt;&#x2F;span&gt;&lt;span&gt;      chunk_refs_s=`{{.chunk_refs_fetch_time | duration}}`,
&lt;&#x2F;span&gt;&lt;span&gt;      chunk_total_s=`{{.store_chunks_download_time | duration}}`,
&lt;&#x2F;span&gt;&lt;span&gt;      cache_download_chunk_s=`{{.cache_chunk_download_time | duration}}`
&lt;&#x2F;span&gt;&lt;span&gt;  | label_format total_time_s=`{{addf .queue_time_s .duration_s}}`
&lt;&#x2F;span&gt;&lt;span&gt;  | label_format        
&lt;&#x2F;span&gt;&lt;span&gt;      queue_pct=`{{mulf (divf .queue_time_s .total_time_s) 100 }}`,
&lt;&#x2F;span&gt;&lt;span&gt;      index_pct=`{{mulf (divf (.chunk_refs_fetch_time | duration) .total_time_s) 100 }}`,
&lt;&#x2F;span&gt;&lt;span&gt;      chunks_pct=`{{mulf (divf .chunk_total_s .total_time_s) 100}}`,
&lt;&#x2F;span&gt;&lt;span&gt;      execution_pct=`{{mulf (divf (subf .duration_s .chunk_refs_s .chunk_total_s) .total_time_s) 100}}`,
&lt;&#x2F;span&gt;&lt;span&gt;      cache_download_pct=`{{mulf (divf .cache_download_chunk_s .chunk_total_s) 100}}`,
&lt;&#x2F;span&gt;&lt;span&gt;      avg_chunk_size=`{{divf (divf (bytes .total_bytes) .cache_chunk_req 1000)}}`
&lt;&#x2F;span&gt;&lt;span&gt;  | line_format `| total_time {{printf &amp;quot;%3.0f&amp;quot; (.total_time_s | float64)}}s | queued {{printf &amp;quot;%3.0f&amp;quot; (.queue_pct | float64)}}% | execution {{printf &amp;quot;%3.0f&amp;quot; (.execution_pct | float64)}}% | index {{printf &amp;quot;%3.0f&amp;quot; (.index_pct | float64)}}% | store {{printf &amp;quot;%3.0f&amp;quot; (.chunks_pct | float64)}}% (cache {{ printf &amp;quot;%3.0f&amp;quot; (.cache_download_pct | float64) }}%) | avg_chunk {{printf &amp;quot;%3.0f&amp;quot; (.avg_chunk_size | float64)}}kB | {{ .query }}`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This displays the time spent in four different phases when the querier executes a slow query (execution time greater than 10 seconds) during subquery execution:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;queued&lt;&#x2F;strong&gt;: Time spent waiting in the queue.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;index&lt;&#x2F;strong&gt;: Time spent searching the index based on Loki labels.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;store&lt;&#x2F;strong&gt;: Time spent retrieving chunks from cache or object storage after obtaining the index.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;execution&lt;&#x2F;strong&gt;: Time spent executing the query in the querier after retrieving the chunks.&lt;&#x2F;p&gt;
&lt;p&gt;Aim for the highest possible &lt;strong&gt;execution&lt;&#x2F;strong&gt; ratio (over 80%), indicating that the querier is spending CPU time calculating results rather than waiting for I&#x2F;O. The blog provides guidance on adjusting configurations if query time is spent in other phases.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ve also customized the &lt;strong&gt;store&lt;&#x2F;strong&gt; presentation by adding a &lt;strong&gt;cache&lt;&#x2F;strong&gt; metric, representing the time the querier spends retrieving chunks from the cache. This ratio should be as close to 100% as possible, indicating that chunk retrieval primarily occurs from the faster cache rather than the much slower object storage. This helped us identify that our previous chunk cache was inefficient and required further tuning, which will be discussed later.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chunk-cache&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chunk-cache&quot; aria-label=&quot;Anchor link for: chunk-cache&quot;&gt;&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;configure&#x2F;#chunk_store_config&quot;&gt;Chunk Cache&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;If you&#x27;ve read &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;blog&#x2F;2023&#x2F;08&#x2F;23&#x2F;how-we-scaled-grafana-cloud-logs-memcached-cluster-to-50tb-and-improved-reliability&#x2F;&quot;&gt;this official blog post&lt;&#x2F;a&gt;, you might consider replacing Loki&#x27;s chunk cache with Memcached and using &lt;code&gt;extstore&lt;&#x2F;code&gt; to mount fast SSDs. This provides more space and cost-effectively improves Loki query performance. We also attempted to calculate the hot query intervals using LogQL, as described in the article. While the article doesn&#x27;t provide the exact query syntax, we used the following LogQL with a heatmap:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;sum_over_time({cluster=&amp;quot;$cluster&amp;quot;, namespace=&amp;quot;$namespace&amp;quot;, app=&amp;quot;loki&amp;quot;, component=&amp;quot;query-frontend&amp;quot;} |= &amp;quot;metrics.go&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;  |= &amp;quot;query_type&amp;quot; | logfmt | query_type=&amp;quot;metric&amp;quot; or query_type=&amp;quot;filter&amp;quot; or query_type=&amp;quot;limited&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;  | unwrap duration(start_delta)[5m])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The heatmap below shows that most query intervals fall within the past 9 hours. After discussion, we decided that the cache should retain at least one day&#x27;s worth of chunks and calculated the required cache space accordingly.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;8df2bccc2f424c3e9be76978042895e2.png?updatedAt=1750326446000&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Our old Loki used Redis as a chunk cache. The current &lt;code&gt;grafana&#x2F;loki&lt;&#x2F;code&gt; helm chart has excellent support for Memcached, so we decided to apply these settings to the new Loki. However, the results were not as expected.&lt;&#x2F;p&gt;
&lt;p&gt;Using the LogQL syntax mentioned earlier, we found that the querier spent over 30% of its time in the &lt;strong&gt;store&lt;&#x2F;strong&gt; phase, and the &lt;strong&gt;cache&lt;&#x2F;strong&gt; phase ratio was less than 50%. This meant we were spending time waiting for chunk downloads from both the cache and object storage, which contradicted our expectation of a near 100% &lt;strong&gt;cache&lt;&#x2F;strong&gt; phase ratio and minimal &lt;strong&gt;store&lt;&#x2F;strong&gt; phase ratio.&lt;&#x2F;p&gt;
&lt;p&gt;After &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;community.grafana.com&#x2F;t&#x2F;enabling-loki-jaeger-tracing&#x2F;51483&quot;&gt;enabling Loki&#x27;s Jaeger tracing feature&lt;&#x2F;a&gt;, we discovered that the querier spent over 10 seconds retrieving chunks from the cache. Combined with the &lt;strong&gt;execution&lt;&#x2F;strong&gt; phase time, we frequently encountered timeout issues.&lt;&#x2F;p&gt;
&lt;p&gt;Fortunately, we found a solution on the &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;memcached&#x2F;memcached&#x2F;wiki&#x2F;ConfiguringLokiExtstore&quot;&gt;official memcached GitHub&lt;&#x2F;a&gt;. The following are the official recommended Memcached settings:&lt;&#x2F;p&gt;
&lt;p&gt;Keep &lt;code&gt;ingester.chunk-target-size&lt;&#x2F;code&gt; and the maximum item size in Memcached (&lt;code&gt;-I&lt;&#x2F;code&gt; parameter) relatively small (e.g., &lt;code&gt;2MB&lt;&#x2F;code&gt;). Also, add the special extstore parameters to Memcached.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;memcached&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -m&lt;&#x2F;span&gt;&lt;span&gt; 6000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -I&lt;&#x2F;span&gt;&lt;span&gt; 2m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;	-o&lt;&#x2F;span&gt;&lt;span&gt; ext_path=&#x2F;disk&#x2F;extstore:500G,ext_wbuf_size=32,ext_threads=10,ext_max_sleep=10000,slab_automove_freeratio=0.10,ext_recache_rate=0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the Loki configuration, set small batch sizes and parallelism, and increase the timeout.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;store.chunks-cache.memcached.batchsize&lt;&#x2F;code&gt; determines how many Memcached keys the Memcached client retrieves at once. Set this to twice the number of Memcached servers.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;store.chunks-cache.memcached.parallelism&lt;&#x2F;code&gt; determines how many Go routines simultaneously retrieve Memcached keys. Set this to the lowest possible value, but increase it if network bandwidth allows.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;store.chunks-cache.memcached.timeout&lt;&#x2F;code&gt; includes the time for Memcached to retrieve the cache and the serialization time. Large chunk item sizes or batch sizes can affect the timeout. The default is &lt;code&gt;100ms&lt;&#x2F;code&gt;, but it&#x27;s strongly recommended to increase it to a higher value, such as &lt;code&gt;60s&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Loki&#x27;s memcache client timeout is measuring the amount of time to &lt;em&gt;fetch and read and process the entire batch of keys from each host&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;code&gt;store.background.write-back-concurrency&lt;&#x2F;code&gt; represents the number of Go routines writing to Memcached. Set this to 1 to avoid aggressively writing to Memcached, which can cause some items to be evicted.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;chunk_store_config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;chunk_cache_config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;memcached&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;batch_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;parallelism&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;memcached_client&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;addresses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;127.0.0.1:11211
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;timeout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;60s
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;background&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;writeback_goroutines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;writeback_buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1000
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;writeback_size_limit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;500MB
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;results&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#results&quot; aria-label=&quot;Anchor link for: results&quot;&gt;Results&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;write-performance&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#write-performance&quot; aria-label=&quot;Anchor link for: write-performance&quot;&gt;Write Performance&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The graph below shows that Loki no longer discards incoming logs due to rate limiting at the distributor end. This is because the ingester has sufficient write performance, combined with appropriate distributor rate limit and shard-streams adjustments.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;9b3cf57812b44d2dab95e0dc953a2047.png?updatedAt=1750326529000&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;query-performance&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#query-performance&quot; aria-label=&quot;Anchor link for: query-performance&quot;&gt;Query Performance&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The following is the execution result of the modified official LogQL mentioned earlier. Even for slow subqueries, the &lt;strong&gt;execution&lt;&#x2F;strong&gt; phase accounts for over 90% of the execution time, and the &lt;strong&gt;cache&lt;&#x2F;strong&gt; portion accounts for over 95%. This confirms that chunks are primarily retrieved from the cache, saving time for calculating the final LogQL results.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s still room for improvement in the &lt;strong&gt;execution&lt;&#x2F;strong&gt; phase, potentially by increasing the number of querier replicas, increasing CPU resources, or improving LogQL syntax to further accelerate search times.
&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;0bd7beb9a0124ea0bda1d474e06d1577.png?updatedAt=1750326541000&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The graph below shows the query time over time. The yellow line represents the 99th percentile, and the orange line represents the 90th percentile. Most query times are less than 10 seconds.
&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;2596fdc70a26474ab054f0f1e2713906.png?updatedAt=1750326553000&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cache-performance&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#cache-performance&quot; aria-label=&quot;Anchor link for: cache-performance&quot;&gt;Cache Performance&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The chunk cache hit rate remains above 70% most of the time. This prevents Loki from retrieving chunks from the much slower Object Storage and reduces the load on Object Storage.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;5b6c5c0beb504dceb2a4d8e3de6fe7af.png?updatedAt=1750326563000&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In this article, we focused on Loki configuration tuning. We explained why write performance should be prioritized, as it affects read performance. We then covered the detailed configuration settings for the components responsible for writing and reading in Loki. We especially thank Grafana and Memcached for providing technical articles that guided our adjustments.&lt;&#x2F;p&gt;
&lt;p&gt;The final result is that we can receive logs from the log collector as much as possible during writing, and we can fully utilize the cache during querying, reducing the load on Object Storage. The results are satisfactory. We will continue to improve the performance of the log collector and Loki to provide Loki users with a better user experience.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Grafana Loki系列文章(I) - 使用金絲雀部署升級Loki：提升效能同時節省成本的實踐經驗</title>
          <pubDate>Fri, 14 Feb 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://www.titaneric.com/posts/grafana-loki-upgrade-1-zh/</link>
          <guid>https://www.titaneric.com/posts/grafana-loki-upgrade-1-zh/</guid>
          <description xml:base="https://www.titaneric.com/posts/grafana-loki-upgrade-1-zh/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;7ebbf0334cc14d71818a451b89847db8.png?updatedAt=1739524743000&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;em&gt;&lt;p style=&quot;text-align:center&quot;&gt;Generated by Microsoft Designer&lt;&#x2F;p&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tldr&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tldr&quot; aria-label=&quot;Anchor link for: tldr&quot;&gt;TLDR&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;在LINE Taiwan，我們決定使用金絲雀部署進行Loki升級&lt;&#x2F;li&gt;
&lt;li&gt;使用Vector取代Promtail協助我們處理log並送往Loki&lt;&#x2F;li&gt;
&lt;li&gt;使用Vector去複製真實流量到新版Loki，幫助我們調整Loki config&lt;&#x2F;li&gt;
&lt;li&gt;使用Vector改善Loki labels，大幅度增進Loki效能&lt;&#x2F;li&gt;
&lt;li&gt;最終省下近70%的機器成本，將後端儲存的負擔降到最低。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;bei-jing&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#bei-jing&quot; aria-label=&quot;Anchor link for: bei-jing&quot;&gt;背景&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;observability-platform&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#observability-platform&quot; aria-label=&quot;Anchor link for: observability-platform&quot;&gt;Observability Platform&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;LINE Taiwan的observability platform主要使用Grafana提供的生態系，利用Grafana當作dashboard以及搜尋log、metrics以及trace的媒介。在metrics部分，我們使用公司提供相容於Prometheus API的系統，Log部分使用自建的Loki cluster，Trace部分則是使用自建的Tempo cluster。&lt;&#x2F;p&gt;
&lt;p&gt;當時我們的Loki cluster版本是2.8，並使用&lt;code&gt;grafana&#x2F;loki-distributed&lt;&#x2F;code&gt; helm chart部署，後端儲存使用公司提供的相容於S3 API的Object Storage系統，比較特別的是，我們按照&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;configure&#x2F;#s3_storage_config&quot;&gt;Loki config&lt;&#x2F;a&gt;的說明，設定10個sharding buckets，嘗試分散bucket流量。cache部分則是使用公司提供的Redis Service。因應多的專案及團隊，我們有開啟&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;operations&#x2F;multi-tenancy&#x2F;&quot;&gt;multi-tenant&lt;&#x2F;a&gt;設定。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lokisheng-ji&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#lokisheng-ji&quot; aria-label=&quot;Anchor link for: lokisheng-ji&quot;&gt;Loki升級&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在去年底時，SRE計劃將Loki cluster升級到3.3，那時的Loki已經有官方維護的&lt;code&gt;grafana&#x2F;loki&lt;&#x2F;code&gt; helm chart，並且在&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;setup&#x2F;install&#x2F;helm&#x2F;install-scalable&#x2F;#deploying-the-helm-chart-for-development-and-testing&quot;&gt;安裝文件&lt;&#x2F;a&gt;直接使用這個helm chart進行安裝，不再仰賴於靠社群維護的&lt;code&gt;grafana&#x2F;loki-distributed&lt;&#x2F;code&gt; helm chart。&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;setup&#x2F;migrate&#x2F;migrate-from-distributed&#x2F;&quot;&gt;Loki官方文件&lt;&#x2F;a&gt;也有提到如何從&lt;code&gt;grafana&#x2F;loki-distributed&lt;&#x2F;code&gt; migrate到&lt;code&gt;grafana&#x2F;loki&lt;&#x2F;code&gt; helm chart的方法，因此推斷這個舊的helm chart將會被deprecate，另外在稍微看過官方migration流程後，覺得不太方便實施。在綜合因素下，同時部署Loki的observability cluster資源還算充足，最後決定部建第二套新的Loki cluster，直接採用&lt;code&gt;grafana&#x2F;loki&lt;&#x2F;code&gt; helm chart部署，希望能透過設計出新的架構、流程及config，去解決當時Loki的各項問題。&lt;&#x2F;p&gt;
&lt;p&gt;在設計migration流程時，我們希望能讓這個新版Loki cluster直接承擔production流量，方便在過程中能針對Loki的config做一些tuning，等到性能調校差不多後，就能逐步開放beta以及production使用。所以如何設計一個平滑的搬遷流程是我們的首要目標，這也是本文的著重重點，Loki細項的config調整將會在下一篇提及。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fang-fa&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fang-fa&quot; aria-label=&quot;Anchor link for: fang-fa&quot;&gt;方法&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;cong-promtail-qian-yi-dao-vector&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#cong-promtail-qian-yi-dao-vector&quot; aria-label=&quot;Anchor link for: cong-promtail-qian-yi-dao-vector&quot;&gt;從 Promtail 遷移到 Vector&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;如前面提到的，我們希望能在migration期間，並存兩套Loki cluster，並且都收同樣的log，這需要在log collector那邊下功夫，我們當時是使用Grafana出的&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;send-data&#x2F;promtail&#x2F;&quot;&gt;Promtail&lt;&#x2F;a&gt;，雖然說Promtail可以設定第二個Loki endpoint，不過Promtail config不好維護而且官方也說明Promtail已經不再接受更新，他們改專注在&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;send-data&#x2F;alloy&#x2F;&quot;&gt;Alloy&lt;&#x2F;a&gt;的開發。&lt;&#x2F;p&gt;
&lt;p&gt;在衡量該替換成哪個log collector時，我們考量目前的幾點需求：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;能正常收kubernetes logs，並有基本的k8s metadata資訊&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;允許送log到Loki去&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;能夠將log內容做些基本的處理，例如masking敏感資料或是調整Loki label&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;send-data&#x2F;alloy&#x2F;&quot;&gt;Alloy&lt;&#x2F;a&gt;雖然皆滿足以上需求，我們也曾在&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;techblog.lycorp.co.jp&#x2F;zh-hant&#x2F;grafana-alloy-best-practice&quot;&gt;其他場景&lt;&#x2F;a&gt;中使用，不過這時想起主管曾提到&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;&quot;&gt;Vector&lt;&#x2F;a&gt;現正流行，在評估它的功能以後，發現都可以滿足目前需求，也有以下優勢：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用Rust開發，在執行上所需的資源遠小於使用Golang開發的Promtail或是Alloy&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;生態系豐富的&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;components&#x2F;&quot;&gt;Vector Components&lt;&#x2F;a&gt;，能依照環境及情境選擇合適的元件&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;提供了稱作&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;docs&#x2F;reference&#x2F;vrl&#x2F;&quot;&gt;Vector Remap Language (VRL)&lt;&#x2F;a&gt;的語法，並支持眾多的&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;docs&#x2F;reference&#x2F;vrl&#x2F;functions&#x2F;&quot;&gt;functions&lt;&#x2F;a&gt;，能根據需求輕易處理log&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;提供了非常方便的&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;docs&#x2F;reference&#x2F;configuration&#x2F;unit-tests&#x2F;&quot;&gt;Unit Tests&lt;&#x2F;a&gt;功能，能夠驗證你寫的VRL沒有問題&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;我們最後決定將Promtail替換成Vector，流程如下：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;將現有的Promtail config移植成Vector config：這包含&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;docs&#x2F;reference&#x2F;configuration&#x2F;sources&#x2F;kubernetes_logs&#x2F;&quot;&gt;Kubernetes logs source&lt;&#x2F;a&gt;、&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;docs&#x2F;reference&#x2F;configuration&#x2F;sinks&#x2F;loki&#x2F;&quot;&gt;Loki sink&lt;&#x2F;a&gt;以及客製化的&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;docs&#x2F;reference&#x2F;configuration&#x2F;transforms&#x2F;remap&#x2F;&quot;&gt;Remap transform&lt;&#x2F;a&gt;等等元件，也撰寫了多個Unit Tests，這能讓我們有更高的信心，確保Vector config能正常運作。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;sources&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;kubernetes_logs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;kubernetes_logs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;transforms&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;add_metadata&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;remap&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;kubernetes_logs
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;      # custom transformation by VRL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;sinks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;loki&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;loki
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;add_metadata &lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;endpoint&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;${LOKI_ENDPOINT}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;tenant_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;{{ .tenant_id }}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;codec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;raw_message
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;*&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;{{ .loki_labels }}&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;使用Vector取代Promtail：我們替換的過程如下：
&lt;ol&gt;
&lt;li&gt;先同步Vector，這時舊的Loki會短暫地直接承擔兩倍流量(Promtail+Vector)&lt;&#x2F;li&gt;
&lt;li&gt;下掉Promtail避免Loki的rate limit錯誤影響Vector&lt;&#x2F;li&gt;
&lt;li&gt;藉由Vector自己的retry機制，正常送log到Loki去&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;我們觀察到在替換後，不僅Loki運作正常，同時帶來的效益是Vector所需的記憶體使用是原先Promtail的30%以下，驗證了Vector的高效能表現。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhu-bu-zeng-jia-sample-logliu-liang&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#zhu-bu-zeng-jia-sample-logliu-liang&quot; aria-label=&quot;Anchor link for: zhu-bu-zeng-jia-sample-logliu-liang&quot;&gt;逐步增加sample log流量&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Vector提供了&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;docs&#x2F;reference&#x2F;configuration&#x2F;transforms&#x2F;sample&#x2F;&quot;&gt;Sample transform&lt;&#x2F;a&gt;功能，可以設定sample rate，進而針對收進來的log進行抽樣，一般應該是用在log量超級大的情境，設定少量但足夠進行排障的sample rate，減少log系統以及後端儲存的負擔。不過我們決定活用這個功能，幫助我們順利地進行Loki migration，具體流程如下。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;定義&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;docs&#x2F;reference&#x2F;configuration&#x2F;transforms&#x2F;sample&#x2F;&quot;&gt;Sample transform&lt;&#x2F;a&gt;，輸入剛使用VRL轉換後的&lt;code&gt;add_metadata&lt;&#x2F;code&gt;元件。以下範例是採用10%(1&#x2F;10)的sample rate。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;transforms&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;add_metadata&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;remap&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;kubernetes_logs
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;      # custom transformation by VRL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;sample_log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;add_metadata
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;rate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;定義新的Loki sink，&lt;code&gt;endpoint&lt;&#x2F;code&gt;改成新的Loki，輸入改成剛才的&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;docs&#x2F;reference&#x2F;configuration&#x2F;transforms&#x2F;sample&#x2F;&quot;&gt;Sample transform&lt;&#x2F;a&gt;元件名稱。以下範例的&lt;code&gt;loki-v3&lt;&#x2F;code&gt;即為新的Loki sink，注意他的輸入是&lt;code&gt;sample_log&lt;&#x2F;code&gt;而不是&lt;code&gt;add_metadata&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;sinks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;loki&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;loki
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;add_metadata &lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;endpoint&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;${LOKI_ENDPOINT}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;tenant_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;{{ .tenant_id }}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;codec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;raw_message
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;*&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;{{ .loki_labels }}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;loki-v3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;loki
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;sample_log &lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;endpoint&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;${LOKI_V3_ENDPOINT}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;tenant_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;{{ .tenant_id }}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;codec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;raw_message
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;*&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;{{ .loki_labels }}&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;
&lt;p&gt;同步Vector config到cluster上，確認新的Loki已經有接收少量，但來自真實環境的log。這時就可以專注在Loki的tuning。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;隨著Loki的tuning，可以逐步將sample rate拉高，我們一路從10%、33%、50%調整到最終的100%，證明新版Loki可以強健地承擔production環境上的log流量。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;gai-shan-loki-labels&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#gai-shan-loki-labels&quot; aria-label=&quot;Anchor link for: gai-shan-loki-labels&quot;&gt;改善Loki labels&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;我們在log collector還在使用Promtail時，訂了以下的label&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;cluster：k8s cluster名稱&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;namespace： k8s namespace&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;container：定義在&lt;code&gt;spec.containers.name&lt;&#x2F;code&gt;的pod container名稱&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;app：&lt;code&gt;app.kubernetes.io&#x2F;name&lt;&#x2F;code&gt;、&lt;code&gt;app&lt;&#x2F;code&gt; pod labels，或是pod名稱&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;component：&lt;code&gt;app.kubernetes.io&#x2F;component&lt;&#x2F;code&gt;或&lt;code&gt;component&lt;&#x2F;code&gt; pod labels&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;instance：&lt;code&gt;app.kubernetes.io&#x2F;instance&lt;&#x2F;code&gt;或&lt;code&gt;instance&lt;&#x2F;code&gt; pod labels&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;nodename：當時pod部署的node名稱&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;pod：pod名稱&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;stream：log是&lt;code&gt;stderr&lt;&#x2F;code&gt;或&lt;code&gt;stdout&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;在詳細閱讀&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;blog&#x2F;2023&#x2F;12&#x2F;20&#x2F;the-concise-guide-to-grafana-loki-everything-you-need-to-know-about-labels&#x2F;&quot;&gt;The concise guide to Grafana Loki: Everything you need to know about labels&lt;&#x2F;a&gt;這篇官方blog後，深深體悟到目前的label設計對Loki儲存以及搜尋上是非常沒有效率的，因此我們決定針對label進行大幅度的改善。&lt;&#x2F;p&gt;
&lt;p&gt;我們決定移除&lt;code&gt;pod&lt;&#x2F;code&gt;以及&lt;code&gt;nodename&lt;&#x2F;code&gt;這些high cardinality的label，改放在&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;get-started&#x2F;labels&#x2F;structured-metadata&#x2F;?pg=blog&amp;amp;plcmt=body-txt&quot;&gt;structured metadata&lt;&#x2F;a&gt;，雖然他的檢索速度不及label，但是這更符合官方建議，而且也能透過引進&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;operations&#x2F;bloom-filters&#x2F;&quot;&gt;Bloom Filters&lt;&#x2F;a&gt;，帶來潛在的搜尋加速。我們也另外放入對搜尋log有幫助的&lt;code&gt;availability_zone&lt;&#x2F;code&gt;, &lt;code&gt;nodepool&lt;&#x2F;code&gt;以及&lt;code&gt;trace_id&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;我們還針對&lt;code&gt;app&lt;&#x2F;code&gt;這個label做特別處理，除了前述app相關的pod label之外，如果pod有parent resource，例如他是daemonset、statefulset或是deployment，我們會將pod owner的欄位取出，處理後寫入到&lt;code&gt;app&lt;&#x2F;code&gt; label中。&lt;&#x2F;p&gt;
&lt;p&gt;我們也另外針對k8s client library或是controller生成的pod做處理。因為它們通常會是一次性任務的job，或是沒有parent resource但是suffix複雜的pod名稱，這樣就不能用前面的方式處理，這時必須更積極地看目前還有哪些&lt;code&gt;app&lt;&#x2F;code&gt; label沒有被處理，這時可以使用下方的&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;query&#x2F;logcli&#x2F;logcli-tutorial&#x2F;#checking-series-cardinality&quot;&gt;logcli&lt;&#x2F;a&gt;指令協助看不同的Loki tenant的stream有哪些，針對常見而且量大的stream中的label作處理。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;LOKI_ADDR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;loki-gateway&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;LOKI_ORG_ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;tenant-id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;logcli&lt;&#x2F;span&gt;&lt;span&gt; series &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;#39;{}&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;這些操作完成之後，預期在&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;grafana&#x2F;loki&#x2F;blob&#x2F;main&#x2F;production&#x2F;loki-mixin-compiled&#x2F;dashboards&#x2F;loki-operational.json&quot;&gt;Loki Operational Dashboard&lt;&#x2F;a&gt;將會看到兩個顯著的變化。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;streams&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#streams&quot; aria-label=&quot;Anchor link for: streams&quot;&gt;Streams&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;由以下結果可以看出，stream的寫入數量從最高的20K，大幅減少至3K。stream數量的改變將會改善chunk的使用率，在之後會說明。&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Before&lt;&#x2F;th&gt;&lt;th&gt;After&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;993ccf977b9b4e8ca123c7400113cc0f.png?updatedAt=1739524948000&quot; width=&quot;700&quot; height=&quot;150&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;c0aab6613b19447ba19aae6ee8d395c5.png?updatedAt=1739524958000&quot;  width=&quot;700&quot; height=&quot;150&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;chunk-flush-reason&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chunk-flush-reason&quot; aria-label=&quot;Anchor link for: chunk-flush-reason&quot;&gt;Chunk Flush Reason&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;從下圖可以看出，&lt;strong&gt;full&lt;&#x2F;strong&gt; Chunk Flush Reason從原先的70%增加到90%以上。理論上總體log量不會變，但因為stream數量變少，使得每一條stream需要消化的log量將會增大，這將會加速該條stream的chunk寫入，使得chunk更快被填滿，最終導致&lt;strong&gt;full&lt;&#x2F;strong&gt; Chunk Flush Reason比率的增加。&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Before&lt;&#x2F;th&gt;&lt;th&gt;After&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;2e73cc7626fd41259a3cc4e6edba98ba.png?updatedAt=1739524974000&quot; width=&quot;700&quot; height=&quot;150&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;61d1990e3bb3496f9b1dcbff3cf59b1e.png?updatedAt=1739524983000&quot;  width=&quot;700&quot; height=&quot;150&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;cheng-xiao&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#cheng-xiao&quot; aria-label=&quot;Anchor link for: cheng-xiao&quot;&gt;成效&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;除了前面提到的&lt;strong&gt;full&lt;&#x2F;strong&gt; Chunk Flush Reason比率提高以及Stream數量的減少之外，針對Loki labels的改善還帶來以下好處。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;geng-gao-de-ingesterxie-ru-xiao-neng&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#geng-gao-de-ingesterxie-ru-xiao-neng&quot; aria-label=&quot;Anchor link for: geng-gao-de-ingesterxie-ru-xiao-neng&quot;&gt;更高的Ingester寫入效能&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在改善Loki labels的前後，所需的Ingester資源差異列在下表，可以看到Ingester需要的replica減少到原先的30%左右，需要的memory更減少到25%以下。在worker node部分因為我們有特別為Ingester設定pod anti-affinity，所以node數量會跟ingester一樣，每個月省下的成本估計為7萬日幣。&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;Ingester&#x27;s #replicas&lt;&#x2F;th&gt;&lt;th&gt;CPU core&lt;&#x2F;th&gt;&lt;th&gt;memory usage in GB&lt;&#x2F;th&gt;&lt;th&gt;dedicated worker node&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Before&lt;&#x2F;td&gt;&lt;td&gt;30&lt;&#x2F;td&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;90&lt;&#x2F;td&gt;&lt;td&gt;30&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;After&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;7.5&lt;&#x2F;td&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;wan-quan-xiao-chu-object-storagefa-sheng-rate-limitji-hui&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#wan-quan-xiao-chu-object-storagefa-sheng-rate-limitji-hui&quot; aria-label=&quot;Anchor link for: wan-quan-xiao-chu-object-storagefa-sheng-rate-limitji-hui&quot;&gt;完全消除Object Storage發生rate limit機會&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;另一個改善Loki labels帶來的效益是，過去在Object Storage頻繁發生的&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;line-objects-internal.com&#x2F;notes-line-dev-files&#x2F;uploads&#x2F;02032190-a1f1-473e-9042-a2db60066052.png&quot;&gt;rate limit錯誤（429）&lt;&#x2F;a&gt;已經不再出現。以下的圖表顯示4xx HTTP status code錯誤的前後差異，能看出在新版Loki所使用的bucket沒有任何錯誤發生。我們判斷是因為新版Loki的&lt;strong&gt;full&lt;&#x2F;strong&gt; Chunk Flush Reason高達九成，再加上Compactor幫忙壓縮剩餘沒有滿的chunk，造成幾乎所有的chunk都是資料密集。比起過去需要使用多個稀疏的chunk，現在可以用更少數量的密集chunk就可以存放相同的log量。這使得Loki在查詢時，需要的Object Storage API請求次數也跟著變少，也就導致rate limit不再發生。另外，我們推斷sharding buckets數量從10增加到20也有幫助。&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Before&lt;&#x2F;th&gt;&lt;th&gt;After&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;5ba2e53b5b8d4963944d25be4c7cca9b.png?updatedAt=1739525018000&quot; width=&quot;700&quot; height=&quot;150&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;24f2bcbf7e2c4fc588ad7342dbb39ece.png?updatedAt=1739525034000&quot;  width=&quot;700&quot; height=&quot;150&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;jie-lun&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#jie-lun&quot; aria-label=&quot;Anchor link for: jie-lun&quot;&gt;結論&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在本文中，介紹了我們如何平滑地migrate Loki cluster，特別是使用Vector去取代Promtail，大量地運用Vector提供的功能強大&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;docs&#x2F;reference&#x2F;vrl&#x2F;&quot;&gt;Vector Remap Language&lt;&#x2F;a&gt;以及生態系豐富的&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;components&#x2F;&quot;&gt;Vector Components&lt;&#x2F;a&gt;，幫助我們在migrate過程中，除了能不影響現有使用者的操作，更能透過sample技巧，讓新版Loki能接收來自production環境的log。&lt;&#x2F;p&gt;
&lt;p&gt;在有了實際的log流量之後，我們也才能針對新版Loki的config進行重點調校。我們還按照官方建議，針對Loki labels進行特別處理，大幅提升Loki寫入效能，以及完全消弭查詢log帶來的潛在Object Storage負擔。&lt;&#x2F;p&gt;
&lt;p&gt;此外，Vector也提供了&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;docs&#x2F;reference&#x2F;configuration&#x2F;transforms&#x2F;log_to_metric&#x2F;&quot;&gt;Log to Metric Transform&lt;&#x2F;a&gt;功能，能夠將log中紀錄的數值直接轉換成Prometheus metrics，我們使用這功能改進&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;techblog.lycorp.co.jp&#x2F;zh-hant&#x2F;grafana-alloy-best-practice&quot;&gt;先前Alloy使用經驗&lt;&#x2F;a&gt;，取代掉Loki Ruler進而降低Loki負擔。值得一題的是我在使用Vector上碰到一些可以改進的地方，我也嘗試做些&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vectordotdev&#x2F;vector&#x2F;pulls?q=is%3Apr+is%3Amerged+author%3Atitaneric&quot;&gt;Vector貢獻&lt;&#x2F;a&gt;，希望Vector能發展的更好。&lt;&#x2F;p&gt;
&lt;p&gt;最後，在前面提及的Loki labels改善，事實上會對Loki的Distributor造成潛在負擔，還有其他的Loki component需要做些特別的tuning，更多的Loki config調整細節，將會在下一篇文章中提到，敬請期待！&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Grafana Loki Series (I) - Upgrading Loki with a Canary Deployment: Enhancing Performance and Reducing Costs</title>
          <pubDate>Fri, 14 Feb 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://www.titaneric.com/posts/grafana-loki-upgrade-1/</link>
          <guid>https://www.titaneric.com/posts/grafana-loki-upgrade-1/</guid>
          <description xml:base="https://www.titaneric.com/posts/grafana-loki-upgrade-1/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;7ebbf0334cc14d71818a451b89847db8.png?updatedAt=1739524743000&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;em&gt;&lt;p style=&quot;text-align:center&quot;&gt;Generated by Microsoft Designer&lt;&#x2F;p&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tldr&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tldr&quot; aria-label=&quot;Anchor link for: tldr&quot;&gt;TLDR&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;At LINE Taiwan, we decided to upgrade Loki using a canary deployment strategy.&lt;&#x2F;li&gt;
&lt;li&gt;Replaced Promtail with Vector to handle logs and send them to Loki.&lt;&#x2F;li&gt;
&lt;li&gt;Used Vector to replicate real traffic to the new Loki, helping us adjust Loki configurations.&lt;&#x2F;li&gt;
&lt;li&gt;Improved Loki labels with Vector, significantly enhancing Loki&#x27;s performance.&lt;&#x2F;li&gt;
&lt;li&gt;Ultimately saved nearly 70% in machine costs, minimizing backend storage burden.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;background&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#background&quot; aria-label=&quot;Anchor link for: background&quot;&gt;Background&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;observability-platform&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#observability-platform&quot; aria-label=&quot;Anchor link for: observability-platform&quot;&gt;Observability Platform&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;LINE Taiwan&#x27;s observability platform primarily uses the Grafana ecosystem, utilizing Grafana as a dashboard and a medium for searching logs, metrics, and traces. For metrics, we use a Prometheus API-compatible system provided by the company. For logs, we use a self-built Loki cluster, and for traces, we use a self-built Tempo cluster.&lt;&#x2F;p&gt;
&lt;p&gt;At that time, our Loki cluster version was 2.8, deployed using the &lt;code&gt;grafana&#x2F;loki-distributed&lt;&#x2F;code&gt; helm chart, with backend storage using an S3 API-compatible Object Storage system provided by the company. Notably, we set up 10 sharding buckets according to the &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;configure&#x2F;#s3_storage_config&quot;&gt;Loki config&lt;&#x2F;a&gt; to distribute bucket traffic. The Loki&#x27;s cache used the company&#x27;s Redis Service. Due to the numerous projects and teams, we enabled the &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;operations&#x2F;multi-tenancy&#x2F;&quot;&gt;multi-tenant&lt;&#x2F;a&gt; setting.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;loki-upgrade&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#loki-upgrade&quot; aria-label=&quot;Anchor link for: loki-upgrade&quot;&gt;Loki Upgrade&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;At the end of last year, the SRE team planned to upgrade the Loki cluster to version 3.3. By then, Loki had an officially maintained &lt;code&gt;grafana&#x2F;loki&lt;&#x2F;code&gt; helm chart, and the &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;setup&#x2F;install&#x2F;helm&#x2F;install-scalable&#x2F;#deploying-the-helm-chart-for-development-and-testing&quot;&gt;installation documentation&lt;&#x2F;a&gt; directly used this helm chart for installation, no longer relying on the community-maintained &lt;code&gt;grafana&#x2F;loki-distributed&lt;&#x2F;code&gt; helm chart. The &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;setup&#x2F;migrate&#x2F;migrate-from-distributed&#x2F;&quot;&gt;official Loki documentation&lt;&#x2F;a&gt; also mentioned how to migrate from the &lt;code&gt;grafana&#x2F;loki-distributed&lt;&#x2F;code&gt; helm chart to the &lt;code&gt;grafana&#x2F;loki&lt;&#x2F;code&gt; helm chart, suggesting that the old helm chart would be deprecated. After reviewing the official migration process, we found it inconvenient to implement. Considering various factors and the sufficient resources of the observability cluster, we decided to build a second new Loki cluster using the &lt;code&gt;grafana&#x2F;loki&lt;&#x2F;code&gt; helm chart, hoping to solve the existing Loki issues through new architecture, processes, and configurations.&lt;&#x2F;p&gt;
&lt;p&gt;When designing the migration process, we aimed to let the new Loki cluster handle production traffic directly and tune Loki&#x27;s configuration during the process. Once the performance tuning was satisfactory, we could gradually announce it for beta and production use. Therefore, designing a smooth migration process was our primary goal, which is the focus of this article. Detailed Loki configuration adjustments will be discussed in the next article.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;method&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#method&quot; aria-label=&quot;Anchor link for: method&quot;&gt;Method&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;migrating-from-promtail-to-vector&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#migrating-from-promtail-to-vector&quot; aria-label=&quot;Anchor link for: migrating-from-promtail-to-vector&quot;&gt;Migrating from Promtail to Vector&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;As mentioned earlier, we wanted to run two Loki clusters concurrently during the migration, both receiving the same logs, which required effort on the log collector side. At that time, we used Grafana&#x27;s &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;send-data&#x2F;promtail&#x2F;&quot;&gt;Promtail&lt;&#x2F;a&gt;. Although Promtail could set a second Loki endpoint, its configuration was hard to maintain, and the official documentation stated that Promtail was no longer accepting updates, focusing instead on the development of &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;send-data&#x2F;alloy&#x2F;&quot;&gt;Alloy&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;When considering which log collector to replace, we evaluated the following needs:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Properly collect Kubernetes logs with basic k8s metadata.&lt;&#x2F;li&gt;
&lt;li&gt;Allow sending logs to Loki.&lt;&#x2F;li&gt;
&lt;li&gt;Perform basic log processing, such as masking sensitive data or adjusting Loki labels.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Although &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;send-data&#x2F;alloy&#x2F;&quot;&gt;Alloy&lt;&#x2F;a&gt; met these requirements and we had used it in &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;techblog.lycorp.co.jp&#x2F;zh-hant&#x2F;grafana-alloy-best-practice&quot;&gt;other scenarios&lt;&#x2F;a&gt;, we recalled that our lead mentioned &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;&quot;&gt;Vector&lt;&#x2F;a&gt; was popular. After evaluating its features, we found it not only met our current needs, but also had the following advantages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Developed in Rust, requiring fewer resources to run compared to Promtail or Alloy developed in Golang.&lt;&#x2F;li&gt;
&lt;li&gt;Rich ecosystem of &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;components&#x2F;&quot;&gt;Vector Components&lt;&#x2F;a&gt;, allowing us to choose suitable components based on the environment and scenario.&lt;&#x2F;li&gt;
&lt;li&gt;Provided the &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;docs&#x2F;reference&#x2F;vrl&#x2F;&quot;&gt;Vector Remap Language (VRL)&lt;&#x2F;a&gt; syntax, supporting numerous &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;docs&#x2F;reference&#x2F;vrl&#x2F;functions&#x2F;&quot;&gt;functions&lt;&#x2F;a&gt;, making it easy to process logs as needed.&lt;&#x2F;li&gt;
&lt;li&gt;Offered convenient &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;docs&#x2F;reference&#x2F;configuration&#x2F;unit-tests&#x2F;&quot;&gt;Unit Tests&lt;&#x2F;a&gt; to verify the correctness of VRL scripts.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We decided to replace Promtail with Vector, following this process:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Migrate the existing Promtail configuration to Vector configuration: This included the &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;docs&#x2F;reference&#x2F;configuration&#x2F;sources&#x2F;kubernetes_logs&#x2F;&quot;&gt;Kubernetes logs source&lt;&#x2F;a&gt;, &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;docs&#x2F;reference&#x2F;configuration&#x2F;sinks&#x2F;loki&#x2F;&quot;&gt;Loki sink&lt;&#x2F;a&gt;, and custom &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;docs&#x2F;reference&#x2F;configuration&#x2F;transforms&#x2F;remap&#x2F;&quot;&gt;Remap transform&lt;&#x2F;a&gt; components. We also wrote multiple Unit Tests to ensure the Vector configuration worked correctly.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;sources&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;kubernetes_logs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;kubernetes_logs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;transforms&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;add_metadata&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;remap&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;kubernetes_logs
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;      # custom transformation by VRL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;sinks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;loki&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;loki
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;add_metadata &lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;endpoint&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;${LOKI_ENDPOINT}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;tenant_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;{{ .tenant_id }}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;codec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;raw_message
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;*&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;{{ .loki_labels }}&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Replace Promtail with Vector: Our replacement process was as follows:
&lt;ol&gt;
&lt;li&gt;First, synchronize Vector, during which the old Loki would temporarily handle double the traffic (Promtail + Vector).&lt;&#x2F;li&gt;
&lt;li&gt;Remove Promtail to avoid Loki&#x27;s rate limit errors affecting Vector.&lt;&#x2F;li&gt;
&lt;li&gt;Use Vector&#x27;s own retry mechanism to send logs to Loki normally.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;After the replacement, we observed that not only did Loki operate normally, but Vector also required less than 30% of the memory usage compared to Promtail, validating Vector&#x27;s high performance.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gradually-increasing-sample-log-traffic&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#gradually-increasing-sample-log-traffic&quot; aria-label=&quot;Anchor link for: gradually-increasing-sample-log-traffic&quot;&gt;Gradually Increasing Sample Log Traffic&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Vector provides the &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;docs&#x2F;reference&#x2F;configuration&#x2F;transforms&#x2F;sample&#x2F;&quot;&gt;Sample transform&lt;&#x2F;a&gt; feature, allowing us to set a sample rate to sample incoming logs. This is generally used in scenarios with extremely high log volumes, setting a small but sufficient sample rate for troubleshooting, reducing the burden on the log system and backend storage. However, we decided to leverage this feature to help us smoothly migrate Loki. The specific process is as follows:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Define the &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;docs&#x2F;reference&#x2F;configuration&#x2F;transforms&#x2F;sample&#x2F;&quot;&gt;Sample transform&lt;&#x2F;a&gt;, inputting the &lt;code&gt;add_metadata&lt;&#x2F;code&gt; component processed by VRL. The following example uses a 10% (1&#x2F;10) sample rate.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;transforms&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;add_metadata&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;remap&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;kubernetes_logs
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;      # custom transformation by VRL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;sample_log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;add_metadata
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;rate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Define a new Loki sink, changing the &lt;code&gt;endpoint&lt;&#x2F;code&gt; to the new Loki and the input to the &lt;code&gt;sample_log&lt;&#x2F;code&gt; component name. In the following example, &lt;code&gt;loki-v3&lt;&#x2F;code&gt; is the new Loki sink, and its input is &lt;code&gt;sample_log&lt;&#x2F;code&gt; instead of &lt;code&gt;add_metadata&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;sinks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;loki&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;loki
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;add_metadata &lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;endpoint&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;${LOKI_ENDPOINT}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;tenant_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;{{ .tenant_id }}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;codec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;raw_message
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;*&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;{{ .loki_labels }}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;loki-v3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;loki
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;sample_log &lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;endpoint&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;${LOKI_V3_ENDPOINT}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;tenant_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;{{ .tenant_id }}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;codec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;raw_message
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;*&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;{{ .loki_labels }}&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;
&lt;p&gt;Synchronize the Vector configuration to the cluster, confirming that the new Loki is receiving a small amount of logs from the real environment. At this point, we can focus on tuning Loki.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;As Loki tuning progresses, gradually increase the sample rate from 10%, 33%, 50% to the final 100%, proving that the new Loki can robustly handle production log traffic.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;improving-loki-labels&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#improving-loki-labels&quot; aria-label=&quot;Anchor link for: improving-loki-labels&quot;&gt;Improving Loki Labels&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;When using Promtail as the log collector, we set the following labels:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;cluster: k8s cluster name&lt;&#x2F;li&gt;
&lt;li&gt;namespace: k8s namespace&lt;&#x2F;li&gt;
&lt;li&gt;container: pod container name defined in &lt;code&gt;spec.containers.name&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;app: &lt;code&gt;app.kubernetes.io&#x2F;name&lt;&#x2F;code&gt;, &lt;code&gt;app&lt;&#x2F;code&gt; pod labels, or pod name&lt;&#x2F;li&gt;
&lt;li&gt;component: &lt;code&gt;app.kubernetes.io&#x2F;component&lt;&#x2F;code&gt; or &lt;code&gt;component&lt;&#x2F;code&gt; pod labels&lt;&#x2F;li&gt;
&lt;li&gt;instance: &lt;code&gt;app.kubernetes.io&#x2F;instance&lt;&#x2F;code&gt; or &lt;code&gt;instance&lt;&#x2F;code&gt; pod labels&lt;&#x2F;li&gt;
&lt;li&gt;nodename: node name where the pod is deployed&lt;&#x2F;li&gt;
&lt;li&gt;pod: pod name&lt;&#x2F;li&gt;
&lt;li&gt;stream: log is &lt;code&gt;stderr&lt;&#x2F;code&gt; or &lt;code&gt;stdout&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After thoroughly reading &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;blog&#x2F;2023&#x2F;12&#x2F;20&#x2F;the-concise-guide-to-grafana-loki-everything-you-need-to-know-about-labels&#x2F;&quot;&gt;The concise guide to Grafana Loki: Everything you need to know about labels&lt;&#x2F;a&gt;, we realized that our current label design was very inefficient for Loki storage and search. Therefore, we decided to significantly improve the labels.&lt;&#x2F;p&gt;
&lt;p&gt;We decided to remove high cardinality labels like &lt;code&gt;pod&lt;&#x2F;code&gt; and &lt;code&gt;nodename&lt;&#x2F;code&gt; and place them in &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;get-started&#x2F;labels&#x2F;structured-metadata&#x2F;?pg=blog&amp;amp;plcmt=body-txt&quot;&gt;structured metadata&lt;&#x2F;a&gt;. Although its retrieval speed is not as fast as labels, this approach aligns with official recommendations and can potentially speed up searches by introducing &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;operations&#x2F;bloom-filters&#x2F;&quot;&gt;Bloom Filters&lt;&#x2F;a&gt;. We also added labels like &lt;code&gt;availability_zone&lt;&#x2F;code&gt;, &lt;code&gt;nodepool&lt;&#x2F;code&gt;, and &lt;code&gt;trace_id&lt;&#x2F;code&gt; to aid in log searches.&lt;&#x2F;p&gt;
&lt;p&gt;We made special adjustments to the &lt;code&gt;app&lt;&#x2F;code&gt; label. Besides the aforementioned app-related pod labels, if the pod had a parent resource (e.g., daemonset, statefulset, or deployment), we extracted the pod owner&#x27;s field, processed it, and wrote it into the &lt;code&gt;app&lt;&#x2F;code&gt; label.&lt;&#x2F;p&gt;
&lt;p&gt;We also made special adjustments for pods generated by k8s client libraries or controllers. These are usually one-time job tasks or pods without parent resources but with complex suffixes in their names. In such cases, we need to actively check which &lt;code&gt;app&lt;&#x2F;code&gt; labels have not been processed. The following &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;docs&#x2F;loki&#x2F;latest&#x2F;query&#x2F;logcli&#x2F;logcli-tutorial&#x2F;#checking-series-cardinality&quot;&gt;logcli&lt;&#x2F;a&gt; command can help identify streams with unprocessed labels in different Loki tenants.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;LOKI_ADDR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;loki-gateway&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;LOKI_ORG_ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;tenant-id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;logcli&lt;&#x2F;span&gt;&lt;span&gt; series &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;#39;{}&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After these operations, we expected to see two significant changes in the &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;grafana&#x2F;loki&#x2F;blob&#x2F;main&#x2F;production&#x2F;loki-mixin-compiled&#x2F;dashboards&#x2F;loki-operational.json&quot;&gt;Loki Operational Dashboard&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;streams&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#streams&quot; aria-label=&quot;Anchor link for: streams&quot;&gt;Streams&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;The results below show that the number of streams written decreased significantly from a peak of 20K to 3K. This change in stream numbers will improve chunk utilization, as explained later.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Before&lt;&#x2F;th&gt;&lt;th&gt;After&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;993ccf977b9b4e8ca123c7400113cc0f.png?updatedAt=1739524948000&quot; width=&quot;700&quot; height=&quot;150&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;c0aab6613b19447ba19aae6ee8d395c5.png?updatedAt=1739524958000&quot;  width=&quot;700&quot; height=&quot;150&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;chunk-flush-reason&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chunk-flush-reason&quot; aria-label=&quot;Anchor link for: chunk-flush-reason&quot;&gt;Chunk Flush Reason&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;The chart below shows that the &lt;strong&gt;full&lt;&#x2F;strong&gt; Chunk Flush Reason increased from 70% to over 90%. In theory, the total log volume remains unchanged, but the reduced number of streams means each stream needs to handle more logs, accelerating chunk writes and leading to more &lt;strong&gt;full&lt;&#x2F;strong&gt; Chunk Flush Reasons.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Before&lt;&#x2F;th&gt;&lt;th&gt;After&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;2e73cc7626fd41259a3cc4e6edba98ba.png?updatedAt=1739524974000&quot; width=&quot;700&quot; height=&quot;150&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;61d1990e3bb3496f9b1dcbff3cf59b1e.png?updatedAt=1739524983000&quot;  width=&quot;700&quot; height=&quot;150&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;results&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#results&quot; aria-label=&quot;Anchor link for: results&quot;&gt;Results&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In addition to the increased &lt;strong&gt;full&lt;&#x2F;strong&gt; Chunk Flush Reason and reduced stream numbers, improving Loki labels brought the following benefits.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;higher-ingester-write-performance&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#higher-ingester-write-performance&quot; aria-label=&quot;Anchor link for: higher-ingester-write-performance&quot;&gt;Higher Ingester Write Performance&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The table below shows the resource differences required for Ingester before and after improving Loki labels. The number of Ingester replicas decreased to about 30% of the original, and memory usage decreased to less than 25%. Since we set pod anti-affinity for Ingesters, the number of worker nodes matches the number of Ingesters, saving an estimated 70,000 yen per month.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;Ingester&#x27;s #replicas&lt;&#x2F;th&gt;&lt;th&gt;CPU core&lt;&#x2F;th&gt;&lt;th&gt;memory usage in GB&lt;&#x2F;th&gt;&lt;th&gt;dedicated worker node&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Before&lt;&#x2F;td&gt;&lt;td&gt;30&lt;&#x2F;td&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;90&lt;&#x2F;td&gt;&lt;td&gt;30&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;After&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;7.5&lt;&#x2F;td&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;completely-eliminated-object-storage-rate-limit-occurrences&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#completely-eliminated-object-storage-rate-limit-occurrences&quot; aria-label=&quot;Anchor link for: completely-eliminated-object-storage-rate-limit-occurrences&quot;&gt;Completely Eliminated Object Storage Rate Limit Occurrences&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Another benefit of improving Loki labels is the elimination of frequent &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;line-objects-internal.com&#x2F;notes-line-dev-files&#x2F;uploads&#x2F;02032190-a1f1-473e-9042-a2db60066052.png&quot;&gt;rate limit errors (429)&lt;&#x2F;a&gt; in Object Storage. The following charts show the differences in 4xx HTTP status code errors before and after the improvement, indicating that no errors occurred in the buckets used by the new Loki. We believe this is due to the high &lt;strong&gt;full&lt;&#x2F;strong&gt; Chunk Flush Reason in the new Loki, combined with Compactor compressing remaining unfilled chunks, resulting in almost all chunks being data-intensive. Compared to using multiple sparse chunks, fewer dense chunks can store the same log volume, reducing the number of Object Storage API requests during log queries and eliminating rate limits. Additionally, increasing the number of sharding buckets from 10 to 20 also helped.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Before&lt;&#x2F;th&gt;&lt;th&gt;After&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;5ba2e53b5b8d4963944d25be4c7cca9b.png?updatedAt=1739525018000&quot; width=&quot;700&quot; height=&quot;150&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;https:&#x2F;&#x2F;vos.line-scdn.net&#x2F;landpress-content-v2-vcfc68aynwenkh3bno0ixfx8&#x2F;24f2bcbf7e2c4fc588ad7342dbb39ece.png?updatedAt=1739525034000&quot;  width=&quot;700&quot; height=&quot;150&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In this article, we introduced how we smoothly migrated the Loki cluster, especially by replacing Promtail with Vector and extensively using Vector&#x27;s powerful &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;docs&#x2F;reference&#x2F;vrl&#x2F;&quot;&gt;Vector Remap Language&lt;&#x2F;a&gt; and rich &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;components&#x2F;&quot;&gt;Vector Components&lt;&#x2F;a&gt;. This helped us migrate without affecting existing users and allowed the new Loki to receive logs from the production environment using sampling techniques.&lt;&#x2F;p&gt;
&lt;p&gt;With actual log traffic, we could focus on tuning the new Loki configuration. Following official recommendations, we made special adjustments to Loki labels, significantly reducing the resources needed for log writes and eliminating potential Object Storage burdens during log queries.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, Vector offers a &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vector.dev&#x2F;docs&#x2F;reference&#x2F;configuration&#x2F;transforms&#x2F;log_to_metric&#x2F;&quot;&gt;Log to Metric Transform&lt;&#x2F;a&gt; feature that can directly convert numerical values recorded in logs into Prometheus metrics. We used this feature to improve our &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;techblog.lycorp.co.jp&#x2F;zh-hant&#x2F;grafana-alloy-best-practice&quot;&gt;previous Alloy experience&lt;&#x2F;a&gt;, replacing Loki Ruler and thereby reducing Loki&#x27;s load. It&#x27;s worth mentioning that I encountered some areas for improvement while using Vector and attempted to make some &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vectordotdev&#x2F;vector&#x2F;pulls?q=is%3Apr+is%3Amerged+author%3Atitaneric&quot;&gt;contributions to Vector&lt;&#x2F;a&gt;, hoping that Vector can develop even better.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, the improvements to Loki labels mentioned earlier may cause potential loads on Loki&#x27;s Distributor and other components, requiring special tuning. More details on Loki configuration adjustments will be discussed in the next article. Stay tuned!&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Grafana Alloy Best Practice</title>
          <pubDate>Sun, 04 Aug 2024 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://www.titaneric.com/posts/grafana-alloy-best-practice/</link>
          <guid>https://www.titaneric.com/posts/grafana-alloy-best-practice/</guid>
          <description xml:base="https://www.titaneric.com/posts/grafana-alloy-best-practice/">&lt;h1 id=&quot;tldr&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tldr&quot; aria-label=&quot;Anchor link for: tldr&quot;&gt;TLDR&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;引進Grafana Alloy及Faro Web SDK，增進RUM以及實現真正的前端到後端的完整tracing。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;jie-shao&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#jie-shao&quot; aria-label=&quot;Anchor link for: jie-shao&quot;&gt;介紹&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;本文中會針對我在COSCUP 2024上報告的&quot;Grafana Alloy Best Practice: Achieving frontend RUM and E2E tracing&quot;做完整闡述。會介紹Grafana Alloy是甚麼以及它的功能，也提到我是如何引進並設計架構應付可能的巨大telemetry流量需求，提到了中間遇到的挑戰、對應的解決方式、成果及未來展望。在閱讀過程中可以搭配上面的投影片參考。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ming-ci-jie-shao&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ming-ci-jie-shao&quot; aria-label=&quot;Anchor link for: ming-ci-jie-shao&quot;&gt;名詞介紹&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;real-user-monitoring-rum&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#real-user-monitoring-rum&quot; aria-label=&quot;Anchor link for: real-user-monitoring-rum&quot;&gt;Real User Monitoring (RUM)&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;RUM目的是要從前端網頁使用者或是瀏覽器上蒐集metrics，用以監控前端網的表現，發現潛在的錯誤，也可以用來追蹤使用者的行為(session)。Web vitals是由Google提出的指標，用來衡量用戶在網頁上的體驗，後面介紹的Faro SDK會一併蒐集web vitals，與錯誤及session等RUM相關資訊收進Grafana Alloy中。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;distributed-tracing&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#distributed-tracing&quot; aria-label=&quot;Anchor link for: distributed-tracing&quot;&gt;Distributed Tracing&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;用來描述一段請求在複雜且分散式系統中的完整流程，可以用來增進應用的可視性，除了可以知道請求在各個元件的消耗時間之外，也可以用來分析錯誤的發生原因。主流已經採用OpenTelemetry標準，它除了trace之外，也有針對log, metrics, profiling, core dump定義相關標準。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;grafana-alloy&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#grafana-alloy&quot; aria-label=&quot;Anchor link for: grafana-alloy&quot;&gt;Grafana Alloy&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Grafana Alloy是高效能，且有彈性的一種OpenTelemetry Collector。可以支援metrics, log以及trace等資料，也提供pipeline的方式，使用語法叫做alloy類似於Terraform HCL，用來描述這些資料該如何被處理，並且送進最終的目的端。在這篇文章中主要使用&lt;code&gt;faro.receiver&lt;&#x2F;code&gt;元件接受來自Faro Web SDK的資料。&lt;&#x2F;p&gt;
&lt;p&gt;註：相較於原始opentelemetry collector使用YAML定義資料流，我覺得alloy使用上比較直覺，也確實如官網所描述的，比較方便debug。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;grafana-faro-web-sdk&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#grafana-faro-web-sdk&quot; aria-label=&quot;Anchor link for: grafana-faro-web-sdk&quot;&gt;Grafana Faro Web SDK&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Grafana Faro是JS的library，可以引用在前端的應用中，用來蒐集前述的RUM及基本的metadata例如瀏覽器及OS名稱。也與opentelemetry-js整合，針對前端應用&lt;code&gt;fetch&lt;&#x2F;code&gt;及&lt;code&gt;XML&lt;&#x2F;code&gt;請求，會自動量測請求的trace。它也能將console log、error、event及&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;PerformanceResourceTiming&quot;&gt;performance resource timing&lt;&#x2F;a&gt;一起送進Grafana Alloy的Faro receiver中。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;xian-you-jia-gou&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#xian-you-jia-gou&quot; aria-label=&quot;Anchor link for: xian-you-jia-gou&quot;&gt;現有架構&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;目前已經引進Grafana Alloy及Faro SDK進目前任職公司，在引進時需要考慮現有的架構，並思考如何整合。下面針對現有架構作介紹。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ji-shu-dui-die&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ji-shu-dui-die&quot; aria-label=&quot;Anchor link for: ji-shu-dui-die&quot;&gt;技術堆疊&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在基本的infra上，底層是由OpenStack建立的私有雲架構，上層提供了Kubernetes、Load Balancer、Object Storage、Redis及MySQL等服務，這些infra主要由日本及韓國負責維運。&lt;&#x2F;p&gt;
&lt;p&gt;在這架構上，台灣的SRE在Kubernetes上部署了Traefik或Contour Ingress Controller，再上層的服務包含Tempo, Loki, ArgoCD, Grafana。&lt;&#x2F;p&gt;
&lt;div&gt;
    &lt;iframe src=&quot;&amp;#x2F;&amp;#x2F;www.slideshare.net&amp;#x2F;slideshow&amp;#x2F;embed_code&amp;#x2F;key&amp;#x2F;gxSQKJ88aLrpQS?startSlide=18&quot; frameborder=&quot;0&quot; width=&quot;900&quot; height=&quot;600&quot;
        marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;
        style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;ying-yong-tuan-dui-jian-kong-jia-gou&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ying-yong-tuan-dui-jian-kong-jia-gou&quot; aria-label=&quot;Anchor link for: ying-yong-tuan-dui-jian-kong-jia-gou&quot;&gt;應用團隊監控架構&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;應用團隊的服務也是部署在k8s上，前面的流量經過Load Balancer進來之後進到Traefik部署的那些節點上，Traefik聆聽Ingress或是IngressRoute設定的規則將流量送進服務內。&lt;&#x2F;p&gt;
&lt;p&gt;這些應用服務會產生log, metrics及trace。metrics抓取規則主要是由PodMonitor或者ServiceMonitor定義，收進cluster上的Agent mode的Prometheus(Statefulset部署)上，會進一步透過remote write機制送進其他團隊管理的Prometheus存放。&lt;&#x2F;p&gt;
&lt;p&gt;log主要會將stdout及stderr寫到節點上的log file上存放，我們使用promtail(Daemonset部暑)將這些log做前處理(加入敏感資料mask及k8s attributes等)之後，會直接送進SRE管理的Loki裡。&lt;&#x2F;p&gt;
&lt;p&gt;trace會先拋到cluster上的otel collector(Deployment部暑)上，一樣會先做些前處理(memory限制，限制每一個span的attributes數量等)，因為數量比較大我們選擇先拋到Kafka topic上，之後會在SRE cluster進行處理。&lt;&#x2F;p&gt;
&lt;div&gt;
    &lt;iframe src=&quot;&amp;#x2F;&amp;#x2F;www.slideshare.net&amp;#x2F;slideshow&amp;#x2F;embed_code&amp;#x2F;key&amp;#x2F;gxSQKJ88aLrpQS?startSlide=19&quot; frameborder=&quot;0&quot; width=&quot;900&quot; height=&quot;600&quot;
        marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;
        style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;srejian-kong-jia-gou&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#srejian-kong-jia-gou&quot; aria-label=&quot;Anchor link for: srejian-kong-jia-gou&quot;&gt;SRE監控架構&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;同樣在SRE cluster會部署Traefik負責接受監控的流量，上面如技術堆疊中提到的部署ArgoCD、Grafana、Tempo、Loki等服務。Grafana的資料來源主要是其他團隊管理的Prometheus，本地的Tempo及Loki，滿足metrics、log及trace的視覺化及告警需求。&lt;&#x2F;p&gt;
&lt;p&gt;在metrics部分，我們僅是使用Prometheus remote read功能讀取其他團隊的遠端Prometheus；在logs部分，透過Loki push API打進來的logs都會被Loki cluster消化，並存放到兼容S3 API的Object Storage中；SRE cluster上會另外部署一套otel collector，負責consume來自Kafka topic的trace，之後送進Tempo cluster進一步消化，也存在Object Storage中，&lt;&#x2F;p&gt;
&lt;div&gt;
    &lt;iframe src=&quot;&amp;#x2F;&amp;#x2F;www.slideshare.net&amp;#x2F;slideshow&amp;#x2F;embed_code&amp;#x2F;key&amp;#x2F;gxSQKJ88aLrpQS?startSlide=20&quot; frameborder=&quot;0&quot; width=&quot;900&quot; height=&quot;600&quot;
        marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;
        style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;&lt;h1 id=&quot;ru-he-she-ji-alloy&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ru-he-she-ji-alloy&quot; aria-label=&quot;Anchor link for: ru-he-she-ji-alloy&quot;&gt;如何設計Alloy&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;xu-qiu&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#xu-qiu&quot; aria-label=&quot;Anchor link for: xu-qiu&quot;&gt;需求&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在設計之前有一些基本的條件需要滿足&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;必要&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;充分利用並整合現有的監控平台&lt;&#x2F;li&gt;
&lt;li&gt;自動化且方便地部暑Alloy&lt;&#x2F;li&gt;
&lt;li&gt;因為Alloy會直接接收來自使用者最真實的流量，所以必須有基本的管控措施。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;em&gt;非必要但有會更好&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;提供簡單的流程給應用團隊申請使用&lt;&#x2F;li&gt;
&lt;li&gt;提供範例程式串接Faro SDK，包含server-side rendering及client-side rendering&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;在申請流程方面，使用者目前能透過Slack workflow申請Alloy使用，會觸發一系列的自動化，使用者就能直接使用。我們也提供Nextjs的範例程式，也寫了教學文件，供前端應用的開發者能輕鬆地串接Faro SDK。接著會針對&lt;em&gt;必要&lt;&#x2F;em&gt;需求，設計Alloy的自動化以及Gateway架構。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ying-yong-tuan-dui-duan-de-alloyjia-gou&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ying-yong-tuan-dui-duan-de-alloyjia-gou&quot; aria-label=&quot;Anchor link for: ying-yong-tuan-dui-duan-de-alloyjia-gou&quot;&gt;應用團隊端的Alloy架構&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Alloy(Deployment部暑)本身是透過ArgoCD ApplicationSet方式部暑，我們抽離了各種跟應用團隊相關的設定成變數，在動態生成ArgoCD Application時能透過go template方式將各項設定填入Alloy的config，這些變數包含了cluster、團隊及namespace名稱等。&lt;&#x2F;p&gt;
&lt;p&gt;Alloy收進來的log是直接透過&lt;code&gt;loki.write&lt;&#x2F;code&gt;直接拋到SRE掌管的Loki cluster上；trace則是送到cluster上的otel collector，如前述說明的會將trace拋到Kafka上，之後會進到Tempo存放。&lt;&#x2F;p&gt;
&lt;p&gt;Alloy會開啟&lt;code&gt;faro.receiver&lt;&#x2F;code&gt;元件功能，在Alloy Deployment前面會掛一個k8s Service，不同於一般的ClusterIP，我們選擇LoadBalancer type，底層的controller聆聽到之後會自動在cluster前面再創建一個LoadBalancer，基本上這樣就可以供應用程式使用。不過Faro SDK蒐集到的telemetry資料並不是直接進入這個LB，前面會再經過一個gateway。&lt;&#x2F;p&gt;
&lt;div&gt;
    &lt;iframe src=&quot;&amp;#x2F;&amp;#x2F;www.slideshare.net&amp;#x2F;slideshow&amp;#x2F;embed_code&amp;#x2F;key&amp;#x2F;gxSQKJ88aLrpQS?startSlide=23&quot; frameborder=&quot;0&quot; width=&quot;900&quot; height=&quot;600&quot;
        marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;
        style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;sreduan-alloy-gatewayjia-gou&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#sreduan-alloy-gatewayjia-gou&quot; aria-label=&quot;Anchor link for: sreduan-alloy-gatewayjia-gou&quot;&gt;SRE端Alloy Gateway架構&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;為了能更方便的掌握各個團隊的telemetry流量，我們選擇在SRE的cluster上部暑Contour當作gateway，Contour的data plane是超高效能的Envoy，也提供了rate limit，如果必要我們可以針對某一些團隊的流量進行限流避免影響到gateway本身，以及對應用團隊cluster的衝擊。&lt;&#x2F;p&gt;
&lt;p&gt;我們使用了Contour提供的HTTPProxy，將相同domain但不同path的請求，送到應用團隊cluster的Alloy入口LB。也用了Endpoint及Service將Alloy入口LB的IP作為k8s service的封裝。&lt;&#x2F;p&gt;
&lt;div&gt;
    &lt;iframe src=&quot;&amp;#x2F;&amp;#x2F;www.slideshare.net&amp;#x2F;slideshow&amp;#x2F;embed_code&amp;#x2F;key&amp;#x2F;gxSQKJ88aLrpQS?startSlide=24&quot; frameborder=&quot;0&quot; width=&quot;900&quot; height=&quot;600&quot;
        marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;
        style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;she-ji-yuan-you&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#she-ji-yuan-you&quot; aria-label=&quot;Anchor link for: she-ji-yuan-you&quot;&gt;設計緣由&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Q: 為什麼使用統一的Alloy gateway，而不是每一個cluster有自己的ingress將流量送進Alloy?&lt;&#x2F;p&gt;
&lt;p&gt;A: 首先我們想要確實的掌握telemetry流量，有了gateway方便我們做監控，如果需要也可以充分利用Contour提供的rate limit功能。再來，我們想要區別一般應用及telemetry的流量，不希望telemetry流量衝擊到一般使用者使用。再者，如果要在每一個應用cluster的ingress進入流量，考量到不同的流量需要分開，就必須創建新的node，部暑新的Traefik，設定LB及DNS record，這需要應用團隊協助進行，這大大的增加佈署上的不便。最後，按照公司的規範，對外的服務需要經過Security Review，如果採用Alloy gateway，只要跑過一次就好，應用團隊也就不用每一個cluster都需要跑這個流程。&lt;&#x2F;p&gt;
&lt;p&gt;Q：為何選擇Contour當作Ingress Controller，而不用Traefik或者其他？&lt;&#x2F;p&gt;
&lt;p&gt;A：我們先前已經有使用過Contour的使用經驗，我們觀察到Contour以及Envoy的效能非常好，需要的記憶體與Traefik相比也少非常多。我們曾經考慮過Envoy自己出的Envoy Gateway，但可惜我們的k8s版本不太相符。也為了不要造成引入後帶來的維護及技術堆疊上的分歧。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tiao-zhan&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tiao-zhan&quot; aria-label=&quot;Anchor link for: tiao-zhan&quot;&gt;挑戰&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;因為Alloy會直接接收來自真實使用者的流量，不用經過CDN等其他cache機制，所以為了能應付潛在的巨大流量，我們針對Contour以及Alloy做了壓力測試，發現他們的效能以及表現都非常好。在流量控制上，我們有3層保護關卡：第一個是應用程式可以設定sample rate，決定多少比率的流量應該被送到Alloy gateway；第二個是使用Contour的rate limit功能，可以針對特定用戶或者全局的設定流量上限；最後一個是Alloy的&lt;code&gt;faro.receiver&lt;&#x2F;code&gt;也提供了rate limit功能，超過上限會回429。理想上這樣的層層保護設計可以保護SRE以及應用團隊的cluster。&lt;&#x2F;p&gt;
&lt;p&gt;Faro SDK蒐集到的資料最終會被送進Loki及Tempo中，我們為了因應潛在的巨大流量，也需要特別針對Loki及Tempo做性能調校，現有的監控平台是multi-tenant的設計，如果需要也可以針對不同的tenant設定rate limit。&lt;&#x2F;p&gt;
&lt;p&gt;Alloy將除了trace之外的資料全部透過log寫入Loki，這也包含了web vitals以及performance resource timing的數值型的資料，這雖然解決了Prometheus可能的high-cardinality問題，但這在資料視覺化上不太方便呈現。官方提供的Faro SDK dashboard是使用logql去拿到Loki的資料，當選取的時段一長，可能就會遇到載入過久的問題，在使用上少了各項metadata，所以呈現的數值都是粗糙的，沒有更為細緻的數據呈現。我們使用Loki ruler將常見的logql語法及metadata，轉化成Prometheus metrics，因為metadata也變成了metrics label之一，這樣就可以解決上述的問題，也能看到比如第118版應用程式在Mac的Arc瀏覽器的web vitals數值，供前端開發者效能優化的參考。&lt;&#x2F;p&gt;
&lt;p&gt;Faro SDK預設的trace propagation格式是使用W3C Trace Context，但是我們在應用團隊cluster佈署的Traefik僅支援Jaeger格式，如果要達成真正的前端到後端完整的tracing，一致的trace propagation是必要的，因為Traefik相對前端或後端應用不方便升級，所以造成前端或後端的應用需要配合Traefik的propagation格式，才能看到完整的tracing軌跡。應用團隊不僅會呼叫自己的服務，也可能呼叫第三方的API，這時如果第三方的API gateway將trace相關的HTTP Header（&lt;code&gt;TraceParent&lt;&#x2F;code&gt;或&lt;code&gt;Uber-Trace-Id&lt;&#x2F;code&gt;）移除，在那之後的tracing將不會被完整串接起來，我們在導入之後也發生這個狀況，在通知第三方服務不要過濾掉這些HTTP Header之後解決了這個issue。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;cheng-guo-ji-zhan-wang&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#cheng-guo-ji-zhan-wang&quot; aria-label=&quot;Anchor link for: cheng-guo-ji-zhan-wang&quot;&gt;成果及展望&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;cheng-guo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#cheng-guo&quot; aria-label=&quot;Anchor link for: cheng-guo&quot;&gt;成果&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;目前團隊的telemetry資料會經過Loki ruler轉換成Prometheus metrics。應用團隊可以根據不同的metadata，例如app名稱、版本、環境、瀏覽器及OS版本的，看到不同的web vitals變化。同時也參考了Grafana Cloud，設計了session的dashboard，應用團隊可以看到不同的用戶在不同session的操作，了解用戶的使用行為。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wei-lai-gong-zuo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#wei-lai-gong-zuo&quot; aria-label=&quot;Anchor link for: wei-lai-gong-zuo&quot;&gt;未來工作&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;如前面提到的，Traefik受限的trace propagation格式造成了開發者的困擾，在Traefik v3之後統一使用OpenTelemetry及W3C Trace Context標準，我們預計將逐步升級上去。&lt;&#x2F;p&gt;
&lt;p&gt;在台灣這邊，應用團隊不管透過手動寫入或是library協助自動產生instrumentation都有累積一段經驗，但是採用的團隊仍不夠廣泛，而且應用團隊仍會需要手動在應用程式注入片段的程式碼才能發揮tracing功能，之後會研究zero-code instrumentation，例如Grafana Beyla這樣的工具，利用eBPF技術在底層追蹤請求及回覆，並轉換成trace。如此一來，團隊能更加專注開發應用，不須費盡心思撰寫instrumentation相關程式，也能享受tracing或其他監控帶來的好處。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;wan-zheng-tou-ying-pian&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#wan-zheng-tou-ying-pian&quot; aria-label=&quot;Anchor link for: wan-zheng-tou-ying-pian&quot;&gt;完整投影片&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;div&gt;
    &lt;iframe src=&quot;&amp;#x2F;&amp;#x2F;www.slideshare.net&amp;#x2F;slideshow&amp;#x2F;embed_code&amp;#x2F;key&amp;#x2F;gxSQKJ88aLrpQS&quot; frameborder=&quot;0&quot; width=&quot;900&quot; height=&quot;600&quot;
        marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;
        style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;</description>
      </item>
      <item>
          <title>The Journey to the Kubernetes Networkiing</title>
          <pubDate>Wed, 08 Feb 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://www.titaneric.com/posts/the-journey-to-the-kubernetes-networking/</link>
          <guid>https://www.titaneric.com/posts/the-journey-to-the-kubernetes-networking/</guid>
          <description xml:base="https://www.titaneric.com/posts/the-journey-to-the-kubernetes-networking/">&lt;div&gt;
    &lt;iframe src=&quot;&amp;#x2F;&amp;#x2F;www.slideshare.net&amp;#x2F;slideshow&amp;#x2F;embed_code&amp;#x2F;key&amp;#x2F;r7psH28xitqtMZ&quot; frameborder=&quot;0&quot; width=&quot;900&quot; height=&quot;600&quot;
        marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;
        style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Still lost the following information.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;BGP&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.rfc-editor.org&#x2F;rfc&#x2F;rfc3927&quot;&gt;linked-local address&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Ingress&lt;&#x2F;li&gt;
&lt;li&gt;API gateway&lt;&#x2F;li&gt;
&lt;li&gt;External Load Balancing&lt;&#x2F;li&gt;
&lt;li&gt;service mesh&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>The Journey to the Kubernetes Metrics</title>
          <pubDate>Sun, 26 Dec 2021 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://www.titaneric.com/posts/the-journey-to-the-kubernetes-metrics/</link>
          <guid>https://www.titaneric.com/posts/the-journey-to-the-kubernetes-metrics/</guid>
          <description xml:base="https://www.titaneric.com/posts/the-journey-to-the-kubernetes-metrics/">&lt;div&gt;
    &lt;iframe src=&quot;&amp;#x2F;&amp;#x2F;www.slideshare.net&amp;#x2F;slideshow&amp;#x2F;embed_code&amp;#x2F;key&amp;#x2F;Hu3wS60GLyDXVk&quot; frameborder=&quot;0&quot; width=&quot;900&quot; height=&quot;600&quot;
        marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;
        style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;</description>
      </item>
      <item>
          <title>Transformer Dissection</title>
          <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://www.titaneric.com/posts/transformer-dissection/</link>
          <guid>https://www.titaneric.com/posts/transformer-dissection/</guid>
          <description xml:base="https://www.titaneric.com/posts/transformer-dissection/">&lt;div&gt;
    &lt;iframe src=&quot;&amp;#x2F;&amp;#x2F;www.slideshare.net&amp;#x2F;slideshow&amp;#x2F;embed_code&amp;#x2F;key&amp;#x2F;hEaoQV0N0u3ow6&quot; frameborder=&quot;0&quot; width=&quot;900&quot; height=&quot;600&quot;
        marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;
        style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;</description>
      </item>
      <item>
          <title>A Learning based Iterative Method for Solving Vehicle Routing</title>
          <pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://www.titaneric.com/posts/a-learning-based-iterative-method-for-solving-vehicle-routing/</link>
          <guid>https://www.titaneric.com/posts/a-learning-based-iterative-method-for-solving-vehicle-routing/</guid>
          <description xml:base="https://www.titaneric.com/posts/a-learning-based-iterative-method-for-solving-vehicle-routing/">&lt;div&gt;
    &lt;iframe src=&quot;&amp;#x2F;&amp;#x2F;www.slideshare.net&amp;#x2F;slideshow&amp;#x2F;embed_code&amp;#x2F;key&amp;#x2F;CcUCh1vkNASGxx&quot; frameborder=&quot;0&quot; width=&quot;900&quot; height=&quot;600&quot;
        marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;
        style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;</description>
      </item>
      <item>
          <title>attention-learn-routing</title>
          <pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://www.titaneric.com/posts/attention-learn-routing/</link>
          <guid>https://www.titaneric.com/posts/attention-learn-routing/</guid>
          <description xml:base="https://www.titaneric.com/posts/attention-learn-routing/">&lt;div&gt;
    &lt;iframe src=&quot;&amp;#x2F;&amp;#x2F;www.slideshare.net&amp;#x2F;slideshow&amp;#x2F;embed_code&amp;#x2F;key&amp;#x2F;dyNbVNuJb6EKLP&quot; frameborder=&quot;0&quot; width=&quot;900&quot; height=&quot;600&quot;
        marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;
        style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;</description>
      </item>
      <item>
          <title>Optnet</title>
          <pubDate>Sat, 02 Nov 2019 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://www.titaneric.com/posts/optnet/</link>
          <guid>https://www.titaneric.com/posts/optnet/</guid>
          <description xml:base="https://www.titaneric.com/posts/optnet/">&lt;div&gt;
    &lt;iframe src=&quot;&amp;#x2F;&amp;#x2F;www.slideshare.net&amp;#x2F;slideshow&amp;#x2F;embed_code&amp;#x2F;key&amp;#x2F;IrObEco1pM2MWf&quot; frameborder=&quot;0&quot; width=&quot;900&quot; height=&quot;600&quot;
        marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;
        style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;</description>
      </item>
      <item>
          <title>Buddy-system</title>
          <pubDate>Mon, 23 Sep 2019 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://www.titaneric.com/posts/buddy-system/</link>
          <guid>https://www.titaneric.com/posts/buddy-system/</guid>
          <description xml:base="https://www.titaneric.com/posts/buddy-system/">&lt;div&gt;
    &lt;iframe src=&quot;&amp;#x2F;&amp;#x2F;www.slideshare.net&amp;#x2F;slideshow&amp;#x2F;embed_code&amp;#x2F;key&amp;#x2F;waN15T9pwKey5O&quot; frameborder=&quot;0&quot; width=&quot;900&quot; height=&quot;600&quot;
        marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;
        style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;</description>
      </item>
      <item>
          <title>Learning to Solve Circuit SAT</title>
          <pubDate>Mon, 23 Sep 2019 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://www.titaneric.com/posts/learning-to-solve-circuit-sat/</link>
          <guid>https://www.titaneric.com/posts/learning-to-solve-circuit-sat/</guid>
          <description xml:base="https://www.titaneric.com/posts/learning-to-solve-circuit-sat/">&lt;div&gt;
    &lt;iframe src=&quot;&amp;#x2F;&amp;#x2F;www.slideshare.net&amp;#x2F;slideshow&amp;#x2F;embed_code&amp;#x2F;key&amp;#x2F;pSQzRLwu5Sd3Vx&quot; frameborder=&quot;0&quot; width=&quot;900&quot; height=&quot;600&quot;
        marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;
        style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;</description>
      </item>
      <item>
          <title>Melding Data Decision Pipeline</title>
          <pubDate>Sun, 22 Sep 2019 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://www.titaneric.com/posts/melding-data-decision-pipeline/</link>
          <guid>https://www.titaneric.com/posts/melding-data-decision-pipeline/</guid>
          <description xml:base="https://www.titaneric.com/posts/melding-data-decision-pipeline/">&lt;div&gt;
    &lt;iframe src=&quot;&amp;#x2F;&amp;#x2F;www.slideshare.net&amp;#x2F;slideshow&amp;#x2F;embed_code&amp;#x2F;key&amp;#x2F;3bSAVwTac8gxnZ&quot; frameborder=&quot;0&quot; width=&quot;900&quot; height=&quot;600&quot;
        marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;
        style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;</description>
      </item>
      <item>
          <title>OSDI-lab1</title>
          <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://www.titaneric.com/posts/osdi-lab1/</link>
          <guid>https://www.titaneric.com/posts/osdi-lab1/</guid>
          <description xml:base="https://www.titaneric.com/posts/osdi-lab1/">&lt;h1 id=&quot;osdi-lab-i&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#osdi-lab-i&quot; aria-label=&quot;Anchor link for: osdi-lab-i&quot;&gt;OSDI lab I&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;objective&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#objective&quot; aria-label=&quot;Anchor link for: objective&quot;&gt;Objective&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Understand version control system and makefile project&lt;&#x2F;li&gt;
&lt;li&gt;Learn how to use QEMU and GDB to debug Linux 0.11 kernel&lt;&#x2F;li&gt;
&lt;li&gt;Learn how to commit to GIT system&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;lab1-1-linux-0-11-development-environment-setup&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#lab1-1-linux-0-11-development-environment-setup&quot; aria-label=&quot;Anchor link for: lab1-1-linux-0-11-development-environment-setup&quot;&gt;Lab1.1 Linux 0.11 Development Environment Setup&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;fix-syntax-error-of-makefile&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fix-syntax-error-of-makefile&quot; aria-label=&quot;Anchor link for: fix-syntax-error-of-makefile&quot;&gt;Fix syntax error of &lt;code&gt;Makefile&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;From &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;make&#x2F;manual&#x2F;html_node&#x2F;Rule-Syntax.html#Rule-Syntax&quot;&gt;Rule Syntax&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;the &lt;em&gt;recipe&lt;&#x2F;em&gt; must start with a tab character&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;cmake&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-cmake &quot;&gt;&lt;code class=&quot;language-cmake&quot; data-lang=&quot;cmake&quot;&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.s:
&lt;&#x2F;span&gt;&lt;span&gt;	@$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;CC&lt;&#x2F;span&gt;&lt;span&gt;) $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;CFLAGS&lt;&#x2F;span&gt;&lt;span&gt;) -S -o $*.s $&amp;lt;
&lt;&#x2F;span&gt;&lt;span&gt;.s.o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	@$(AS)  -o $*.o $&amp;lt;
&lt;&#x2F;span&gt;&lt;span&gt;.c.o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	@$(CC) $(CFLAGS) -c -o $*.o $&amp;lt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;give-execute-permission-to-tools-build-sh&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#give-execute-permission-to-tools-build-sh&quot; aria-label=&quot;Anchor link for: give-execute-permission-to-tools-build-sh&quot;&gt;Give execute permission to &lt;code&gt;tools&#x2F;build.sh&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; +x tools&#x2F;build.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;change-gcc-version-to-4-8&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#change-gcc-version-to-4-8&quot; aria-label=&quot;Anchor link for: change-gcc-version-to-4-8&quot;&gt;Change GCC version to 4.8&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;cmake&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-cmake &quot;&gt;&lt;code class=&quot;language-cmake&quot; data-lang=&quot;cmake&quot;&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# This file is the Makefile Header for every sub Makefile, which designed to
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# simplfy the porting and maintaining operation
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# author: falcon &amp;lt;wuzhangjin@gmail.com&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# update: 2008-10-29
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;AS&lt;&#x2F;span&gt;&lt;span&gt;	= as --32
&lt;&#x2F;span&gt;&lt;span&gt;LD	= ld
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;#LDFLAGS = -m elf_i386 -x 
&lt;&#x2F;span&gt;&lt;span&gt;LDFLAGS = -m elf_i386
&lt;&#x2F;span&gt;&lt;span&gt;CC	= gcc-4.8
&lt;&#x2F;span&gt;&lt;span&gt;CFLAGS  = -g -m32 -fno-builtin -fno-stack-protector -fomit-frame-pointer -fstrength-reduce &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;#-Wall
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;CPP	= cpp-4.8 -nostdinc
&lt;&#x2F;span&gt;&lt;span&gt;AR	= ar
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# we should use -fno-stack-protector with gcc 4.3
&lt;&#x2F;span&gt;&lt;span&gt;gcc_version=$(shell ls -l `which $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;CC&lt;&#x2F;span&gt;&lt;span&gt;)` | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span&gt; &amp;#39;-&amp;#39; &amp;#39;\n&amp;#39; | tail -1)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;compile-and-install-newest-qemu&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#compile-and-install-newest-qemu&quot; aria-label=&quot;Anchor link for: compile-and-install-newest-qemu&quot;&gt;Compile and install newest QEMU&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;On Ubuntu 18.04&lt;&#x2F;p&gt;
&lt;h4 id=&quot;setup-the-dependencies&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#setup-the-dependencies&quot; aria-label=&quot;Anchor link for: setup-the-dependencies&quot;&gt;Setup the dependencies&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get install checkinstall
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get install python
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get install build-essential zlib1g-dev pkg-config libglib2.0-dev binutils-dev libboost-all-dev autoconf libtool libssl-dev libpixman-1-dev libpython-dev python-pip python-capstone virtualenv
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get install flex bison g++-4.8
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Cisco-Talos&#x2F;pyrebox&#x2F;issues&#x2F;41&quot;&gt;ref&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;start-to-install-qemu&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#start-to-install-qemu&quot; aria-label=&quot;Anchor link for: start-to-install-qemu&quot;&gt;Start to install qemu&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;git.qemu.org&#x2F;git&#x2F;qemu.git
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; qemu
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; submodule init
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; submodule update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; --recursive
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;.&#x2F;configure
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;make
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; checkinstall make install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.qemu.org&#x2F;download&#x2F;#source&quot;&gt;ref&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Validate the version must be larger than 2.5.x&lt;&#x2F;p&gt;
&lt;h3 id=&quot;run-the-linux-0-11&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#run-the-linux-0-11&quot; aria-label=&quot;Anchor link for: run-the-linux-0-11&quot;&gt;Run the Linux 0.11&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;qemu-system-i386&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -m&lt;&#x2F;span&gt;&lt;span&gt; 16M&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -boot&lt;&#x2F;span&gt;&lt;span&gt; a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -fda&lt;&#x2F;span&gt;&lt;span&gt; Image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -hda&lt;&#x2F;span&gt;&lt;span&gt; ..&#x2F;osdi.img
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.imgur.com&#x2F;xD0vffk.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lab-1-2-debug-kernel&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#lab-1-2-debug-kernel&quot; aria-label=&quot;Anchor link for: lab-1-2-debug-kernel&quot;&gt;Lab 1-2 Debug kernel&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;look-the-problem-of-panic&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#look-the-problem-of-panic&quot; aria-label=&quot;Anchor link for: look-the-problem-of-panic&quot;&gt;Look the problem of &lt;code&gt;panic&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The kernel stuck on the &lt;code&gt;panic(&quot;&quot;)&lt;&#x2F;code&gt; at &lt;code&gt;init&#x2F;maic.c&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Look at &lt;code&gt;kernel&#x2F;panic.c&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;*
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt; *  linux&#x2F;kernel&#x2F;panic.c
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt; *
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt; *  (C) 1991  Linus Torvalds
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;*
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt; * This function is used through-out the kernel (includeinh mm and fs)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt; * to indicate a major problem.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;PANIC
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;lt;linux&#x2F;kernel.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;lt;linux&#x2F;sched.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sys_sync&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;* it&amp;#39;s really int *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;printk&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Kernel panic: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\n\r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(current &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; task[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;printk&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;In swapper task - not syncing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\n\r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sys_sync&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Due to the description of &lt;code&gt;panic&lt;&#x2F;code&gt;, it may not suitable to put &lt;code&gt;panic&lt;&#x2F;code&gt; at &lt;code&gt;init&#x2F;main.c&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;mem_init&lt;&#x2F;span&gt;&lt;span&gt;(main_memory_start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;memory_end)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;trap_init&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;blk_dev_init&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;chr_dev_init&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;tty_init&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;time_init&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sched_init&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;buffer_init&lt;&#x2F;span&gt;&lt;span&gt;(buffer_memory_end)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;hd_init&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;floppy_init&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sti&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; panic(&amp;quot;&amp;quot;); 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;move_to_user_mode&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;fork&lt;&#x2F;span&gt;&lt;span&gt;()) {		&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;* we count on this going ok *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Uncomment it and try it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.imgur.com&#x2F;T1mKZna.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here it is, fix next bug.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;look-the-problem-of-out-of-memory&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#look-the-problem-of-out-of-memory&quot; aria-label=&quot;Anchor link for: look-the-problem-of-out-of-memory&quot;&gt;Look the problem of &lt;code&gt;out of memory&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.imgur.com&#x2F;JIRQ5YR.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Actually, there are several warnings relating to &lt;code&gt;task&lt;&#x2F;code&gt; at &lt;code&gt;sched.c&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; task_struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; task[NR_TASKS] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;(init_task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;task)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;task&lt;&#x2F;code&gt; has at leat one &lt;code&gt;task_struct&lt;&#x2F;code&gt;, checkout the &lt;code&gt;NR_TASKS&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;NR_TASKS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The value of &lt;code&gt;NR_TASKS&lt;&#x2F;code&gt; is zero, which is unreasonable.&lt;&#x2F;p&gt;
&lt;p&gt;Check out &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;download.oldlinux.org&#x2F;ECLK-5.0-WithCover.pdf&quot;&gt;document&lt;&#x2F;a&gt; at P994.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.imgur.com&#x2F;4mAhfLo.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Therefore, change 0 to 64, and try it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.imgur.com&#x2F;fbap7SK.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Fortunately, no error happened!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.imgur.com&#x2F;cmQyHsq.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Work perfectly!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;print-your-student-id&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#print-your-student-id&quot; aria-label=&quot;Anchor link for: print-your-student-id&quot;&gt;Print your student id&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;We need to print out the student ID before shell startup, so look at &lt;code&gt;main.c&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt; buffers = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt; bytes buffer space&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\n\r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;NR_BUFFERS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;		NR_BUFFERS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;BLOCK_SIZE)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Free mem: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt; bytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\n\r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;memory_end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;main_memory_start)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(pid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;fork&lt;&#x2F;span&gt;&lt;span&gt;())) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&#x2F;etc&#x2F;rc&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;O_RDONLY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;_exit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;execve&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&#x2F;bin&#x2F;sh&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;argv_rc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;envp_rc)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;_exit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(pid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(pid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;i))
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;* nothing *&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((pid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;fork&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Fork failed in init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;pid) {
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;setsid&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&#x2F;dev&#x2F;tty0&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;O_RDWR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;dup&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;dup&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;_exit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;execve&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&#x2F;bin&#x2F;sh&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;argv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;envp))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are two shell startup, if we print out the student ID before first shell.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.imgur.com&#x2F;HK9suMP.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The OK message will print before student ID.&lt;&#x2F;p&gt;
&lt;p&gt;So print student ID before second shell.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.imgur.com&#x2F;OM2s8Ca.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Work great! All done!!!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;questions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#questions&quot; aria-label=&quot;Anchor link for: questions&quot;&gt;Questions&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Q1: QEMU&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;qemu-system-i386 -m 16M -boot a -fda Image -hda ..&#x2F;osdi.img -s -S -serial stdio
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;According to the above command:
Q1.1: What’s the difference between -S and -s in the command?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;According to &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;manned.org&#x2F;qemu-system-i386&#x2F;eeff8ce3&quot;&gt;man&lt;&#x2F;a&gt; page of &lt;code&gt;qemu-system-i386&lt;&#x2F;code&gt;:
&lt;code&gt;-s&lt;&#x2F;code&gt;: Wait gdb connection to port 1234.
&lt;code&gt;-S&lt;&#x2F;code&gt;: Do not start CPU at startup (you must type &#x27;c&#x27; in the monitor).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Q1.2: What are -boot, -fda and -hda used for? If I want to boot with ..&#x2F;osdi.img(supposed it’s a bootable image) what should I do?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;-boot a&lt;&#x2F;code&gt;: Boot from floppy.
&lt;code&gt;-fda Image&lt;&#x2F;code&gt;: Use &lt;code&gt;Image&lt;&#x2F;code&gt; as floppy.
&lt;code&gt;-hda ..&#x2F;osdi.img&lt;&#x2F;code&gt;: Use &lt;code&gt;..&#x2F;osdi.img&lt;&#x2F;code&gt; as hard disk.
&lt;code&gt;-boot c -hda ..&#x2F;osdi.img&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Q2: Git&lt;&#x2F;p&gt;
&lt;p&gt;Q2.1: Please explain all the flags and options used in below command:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;git checkout -b lab1 origin&#x2F;lab1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a remote repo called &lt;code&gt;origin&lt;&#x2F;code&gt; and has a branch named &lt;code&gt;lab1&lt;&#x2F;code&gt;, we want to create a local branch called &lt;code&gt;lab1&lt;&#x2F;code&gt; attach on it and move the &lt;code&gt;HEAD&lt;&#x2F;code&gt; on it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Q2.2 What are the differences among git add, git commit, and git push? What’s the timing you will use them?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are three &lt;code&gt;working directory&lt;&#x2F;code&gt;, &lt;code&gt;stagin area&lt;&#x2F;code&gt; and &lt;code&gt;repository&lt;&#x2F;code&gt;. When you &lt;code&gt;add&lt;&#x2F;code&gt; something, you move these into from &lt;code&gt;working direcotory&lt;&#x2F;code&gt; to &lt;code&gt;staging area&lt;&#x2F;code&gt;, and when you &lt;code&gt;commit&lt;&#x2F;code&gt; it, you move to &lt;code&gt;repository&lt;&#x2F;code&gt;. At last, when you &lt;code&gt;push&lt;&#x2F;code&gt; it, you push your code from &lt;code&gt;local repo&lt;&#x2F;code&gt; to &lt;code&gt;remote repo&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Q3: Makefile&lt;&#x2F;p&gt;
&lt;p&gt;Q3.1: What happened when you run the below command? Please explain it according to the Makefile.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;make clean &amp;amp;&amp;amp; make
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;According to &lt;code&gt;Makefile&lt;&#x2F;code&gt;, &lt;code&gt;make clean&lt;&#x2F;code&gt; will remove all object file, image etc. &lt;code&gt;make&lt;&#x2F;code&gt; will follow the instruction on &lt;code&gt;Makefile&lt;&#x2F;code&gt; and build it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Q3.2: I did edit the include&#x2F;linux&#x2F;sched.h file and run make command successfully but the Image file remains the same. However, if I edit the init&#x2F;main.c file and run make command. My Image will be recompile. What’s the difference between these two operations?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;Makefile&lt;&#x2F;code&gt; didn&#x27;t write carefully, you should execute &lt;code&gt;make clean &amp;amp;&amp;amp; make&lt;&#x2F;code&gt; to rebuild.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Q4: After making, what does the kernel Image ‘Image’ look like?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;According to &lt;code&gt;build.sh&lt;&#x2F;code&gt;, &lt;code&gt;bootsect&lt;&#x2F;code&gt; will put first and &lt;code&gt;setup&lt;&#x2F;code&gt; will be the second. Finally, the &lt;code&gt;system&lt;&#x2F;code&gt; will be at last.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# Write bootsect (512 bytes, one sector) to stdout
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;-f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span&gt;bootsect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;there is no bootsect binary file there&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt; -1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;dd&lt;&#x2F;span&gt;&lt;span&gt; if=$bootsect bs=512 count=1 of=$IMAGE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# Write setup(4 * 512bytes, four sectors) to stdout
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;-f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span&gt;setup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;there is no setup binary file there&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt; -1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;dd&lt;&#x2F;span&gt;&lt;span&gt; if=$setup seek=1 bs=512 count=4 of=$IMAGE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# Write system(&amp;lt; SYS_SIZE) to stdout
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;-f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;there is no system binary file there&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt; -1
&lt;&#x2F;span&gt;&lt;span&gt;system_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;wc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -c &lt;&#x2F;span&gt;&lt;span&gt;$system &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -f1&lt;&#x2F;span&gt;&lt;span&gt;`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span&gt;$system_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;-gt &lt;&#x2F;span&gt;&lt;span&gt;$SYS_SIZE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;the system binary is too big&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt; -1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;dd&lt;&#x2F;span&gt;&lt;span&gt; if=$system seek=5 bs=512 count=$((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2888&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)) of=$IMAGE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
      </item>
      <item>
          <title>OSDI-lab2</title>
          <pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://www.titaneric.com/posts/osdi-lab2/</link>
          <guid>https://www.titaneric.com/posts/osdi-lab2/</guid>
          <description xml:base="https://www.titaneric.com/posts/osdi-lab2/">&lt;h1 id=&quot;osdi-lab-ii&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#osdi-lab-ii&quot; aria-label=&quot;Anchor link for: osdi-lab-ii&quot;&gt;OSDI lab II&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;objective&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#objective&quot; aria-label=&quot;Anchor link for: objective&quot;&gt;Objective&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Learn how to build a customized BIOS and show some message on system startup.&lt;&#x2F;li&gt;
&lt;li&gt;Understand kernel booting flow and boot a ‘hello world’ program.&lt;&#x2F;li&gt;
&lt;li&gt;Learn how to use BIOS interrupt call to do I&#x2F;O tasks.&lt;&#x2F;li&gt;
&lt;li&gt;Learn how to modify linux-0.11 bootsect.s and the build system to create a multiboot kernel image.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;lab2-1-build-seabios-add-some-message-before-system-startup&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#lab2-1-build-seabios-add-some-message-before-system-startup&quot; aria-label=&quot;Anchor link for: lab2-1-build-seabios-add-some-message-before-system-startup&quot;&gt;Lab2.1 - Build SEABIOS, add some message before system startup&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;git.seabios.org&#x2F;seabios.git seabios
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; seabios&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt; menuconfig
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;make
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Print message in &lt;code&gt;enable_vga_console&lt;&#x2F;code&gt; function in &lt;code&gt;src&#x2F;bootsplash.c&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;void
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;enable_vga_console&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;dprintf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Turning on vga text mode console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; bregs br&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;* Enable VGA text mode *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;memset&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;br&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span&gt;(br))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    br&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;ax &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x0003&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;call16_int10&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;br)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;This is OSDI lab2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Write to screen.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;SeaBIOS (version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; VERSION)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;display_uuid&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Use the qemu &lt;code&gt;-bios&lt;&#x2F;code&gt; option to load customized BIOS.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;qemu-system-i386&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -m&lt;&#x2F;span&gt;&lt;span&gt; 16M&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -boot&lt;&#x2F;span&gt;&lt;span&gt; a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -fda&lt;&#x2F;span&gt;&lt;span&gt; Image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -hda&lt;&#x2F;span&gt;&lt;span&gt; osdi.img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -bios&lt;&#x2F;span&gt;&lt;span&gt; seabios&#x2F;out&#x2F;bios.bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Because the customized BIOS is part of our lab, so I push it to new repo and add the &lt;strong&gt;submodule&lt;&#x2F;strong&gt; to &lt;code&gt;osdi&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; submodule add bios-url bios-in-osdi-path
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After that, I can update the customized BIOS even though we develop the BIOS and OSDI at different repo using the following command.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; submodule update bios-name
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;lab2-2-add-image-before-system-startup&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#lab2-2-add-image-before-system-startup&quot; aria-label=&quot;Anchor link for: lab2-2-add-image-before-system-startup&quot;&gt;Lab2.2 - Add image before system startup&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We want to load the image when BIOS is loading.&lt;&#x2F;p&gt;
&lt;p&gt;Firstly, we want to find which function can help us to do that.
There is a function called &lt;code&gt;enable_bootsplash&lt;&#x2F;code&gt; @ &lt;code&gt;src&#x2F;bootsplash.c&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;void
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;enable_bootsplash&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;CONFIG_BOOTSPLASH)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;* splash picture can be bmp or jpeg file *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;dprintf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Checking for bootsplash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    u8 type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;* 0 means jpg, 1 means bmp, default is 0=jpg *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; filesize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    u8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;filedata &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;romfile_loadfile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;bootsplash.jpg&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;filesize)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;filedata) {
&lt;&#x2F;span&gt;&lt;span&gt;        filedata &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;romfile_loadfile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;bootsplash.bmp&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;filesize)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;filedata)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This function will check the &lt;code&gt;CONFIG_BOOTSPLASH&lt;&#x2F;code&gt; and bootsplash image.&lt;&#x2F;p&gt;
&lt;p&gt;Secondly, we find that the &lt;code&gt;enable_bootsplash&lt;&#x2F;code&gt; will be called by &lt;code&gt;interactive_bootmenu&lt;&#x2F;code&gt; @ &lt;code&gt;src&#x2F;boot.c&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Show IPL option menu.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;void
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;interactive_bootmenu&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; XXX - show available drives?
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;CONFIG_BOOTMENU: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; CONFIG_BOOTMENU)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;show-boot-menu: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;romfile_loadint&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;etc&#x2F;show-boot-menu&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt; CONFIG_BOOTMENU &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|| !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;romfile_loadint&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;etc&#x2F;show-boot-menu&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;get_keystroke&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;bootmsg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;romfile_loadfile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;etc&#x2F;boot-menu-message&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; menukey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;romfile_loadint&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;etc&#x2F;boot-menu-key&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; bootmsg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;Press ESC for boot menu.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\n\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;free&lt;&#x2F;span&gt;&lt;span&gt;(bootmsg)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    u32 menutime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;romfile_loadint&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;etc&#x2F;boot-menu-wait&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; DEFAULT_BOOTMENU_WAIT)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;menutime: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; menutime)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;enable_bootsplash&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It seems that it is the function to provide the boot menu (i.e, booting from which boot device).
This function will also check the &lt;code&gt;CONFIG_BOOTMENU&lt;&#x2F;code&gt; and the file &lt;code&gt;etc&#x2F;show-boot-menu&lt;&#x2F;code&gt;.
If we print the config before the first if condition, we will find that&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;OSDI-lab2&#x2F;J0M7dAD.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Therefore, the &lt;code&gt;CONFIG_BOOTMENU&lt;&#x2F;code&gt; is 1 but &lt;code&gt;etc&#x2F;show-boot-menu&lt;&#x2F;code&gt; is 0, so the &lt;code&gt;interactive_bootmenu&lt;&#x2F;code&gt; will return early without executing the rest of code including the &lt;code&gt;enable_bootsplash&lt;&#x2F;code&gt; method.&lt;&#x2F;p&gt;
&lt;p&gt;After did some &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;qemu&#x2F;qemu&#x2F;blob&#x2F;master&#x2F;docs&#x2F;specs&#x2F;fw_cfg.rst&quot;&gt;researches&lt;&#x2F;a&gt;, qemu provide an option &lt;code&gt;-fw_cfg&lt;&#x2F;code&gt; to provide some file as&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-fw_cfg [name=]&amp;lt;item_name&amp;gt;,file=&amp;lt;path&amp;gt;&lt;&#x2F;code&gt;. or&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-fw_cfg [name=]&amp;lt;item_name&amp;gt;,string=&amp;lt;string&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So I revise the qemu command to&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;qemu-system-i386&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -m&lt;&#x2F;span&gt;&lt;span&gt; 16M&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -boot&lt;&#x2F;span&gt;&lt;span&gt; a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -fda&lt;&#x2F;span&gt;&lt;span&gt; Image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -hda&lt;&#x2F;span&gt;&lt;span&gt; ..&#x2F;osdi.img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -bios&lt;&#x2F;span&gt;&lt;span&gt; seabios&#x2F;out&#x2F;bios.bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -fw_cfg&lt;&#x2F;span&gt;&lt;span&gt; name=etc&#x2F;show-boot-menu,string=1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After that, the result became&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;OSDI-lab2&#x2F;v1dMZr5.png&quot; alt=&quot; &quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It did enter the rest of code and ready to execute boot menu, and because the &lt;code&gt;enable_bootsplash&lt;&#x2F;code&gt; will check the image before load it, and we provide the bootsplash image as following.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;qemu-system-i386&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -m&lt;&#x2F;span&gt;&lt;span&gt; 16M&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -boot&lt;&#x2F;span&gt;&lt;span&gt; a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -fda&lt;&#x2F;span&gt;&lt;span&gt; Image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -hda&lt;&#x2F;span&gt;&lt;span&gt; ..&#x2F;osdi.img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -bios&lt;&#x2F;span&gt;&lt;span&gt; seabios&#x2F;out&#x2F;bios.bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -fw_cfg&lt;&#x2F;span&gt;&lt;span&gt; name=etc&#x2F;show-boot-menu,string=1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -fw_cfg&lt;&#x2F;span&gt;&lt;span&gt; name=bootsplash.jpg,file=bootsplash.jpg
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;OSDI-lab2&#x2F;hwRLd1Z.png&quot; alt=&quot; &quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It work!&lt;&#x2F;p&gt;
&lt;p&gt;My friends also found that another qemu option &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;manpages.debian.org&#x2F;jessie&#x2F;qemu-system-x86&#x2F;qemu-system-x86_64.1.en.html&quot;&gt;&lt;code&gt;-boot&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; provide the same functionality.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;qemu-system-i386&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -m&lt;&#x2F;span&gt;&lt;span&gt; 16M&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -boot&lt;&#x2F;span&gt;&lt;span&gt; order=a,menu=on,splash=bootsplash.jpg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;  -fda&lt;&#x2F;span&gt;&lt;span&gt; Image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -hda&lt;&#x2F;span&gt;&lt;span&gt; ..&#x2F;osdi.img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -bios&lt;&#x2F;span&gt;&lt;span&gt; seabios&#x2F;out&#x2F;bios.bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which will be more clever and elegant!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lab2-3-boot-the-hello-world-program&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#lab2-3-boot-the-hello-world-program&quot; aria-label=&quot;Anchor link for: lab2-3-boot-the-hello-world-program&quot;&gt;Lab2.3 - Boot the hello world program&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In this time, we will revise the kernel image structure and boot the given &lt;code&gt;hello&lt;&#x2F;code&gt;.
We will revise the image from
&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;OSDI-lab2&#x2F;DjL3gC2.png&quot; alt=&quot; &quot; &#x2F;&gt;
to
&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;OSDI-lab2&#x2F;biwIcIa.png&quot; alt=&quot; &quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;makefile&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#makefile&quot; aria-label=&quot;Anchor link for: makefile&quot;&gt;Makefile&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Of course we will revise the Makefile and build.sh.&lt;&#x2F;p&gt;
&lt;p&gt;Firstly, put the &lt;code&gt;hello.s&lt;&#x2F;code&gt; to &lt;code&gt;boot&lt;&#x2F;code&gt;, and revise the &lt;code&gt;boot&#x2F;Makefile&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;all: bootsect hello setup
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;hello: hello.s
&lt;&#x2F;span&gt;&lt;span&gt;	@$(AS) -o hello.o hello.s
&lt;&#x2F;span&gt;&lt;span&gt;	@$(LD) $(LDFLAGS) -o hello hello.o
&lt;&#x2F;span&gt;&lt;span&gt;	@objcopy -R .pdr -R .comment -R.note -S -O binary hello
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;clean:
&lt;&#x2F;span&gt;&lt;span&gt;	@rm -f bootsect bootsect.o setup setup.o head.o hello hello.o
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Just add new rule for hello and remember to clean its object file when executing &lt;code&gt;make clean&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Secondly, revise the &lt;code&gt;Makefile&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;Image: boot&#x2F;bootsect boot&#x2F;hello boot&#x2F;setup tools&#x2F;system
&lt;&#x2F;span&gt;&lt;span&gt;	@cp -f tools&#x2F;system system.tmp
&lt;&#x2F;span&gt;&lt;span&gt;	@strip system.tmp
&lt;&#x2F;span&gt;&lt;span&gt;	@objcopy -O binary -R .note -R .comment system.tmp tools&#x2F;kernel
&lt;&#x2F;span&gt;&lt;span&gt;	@chmod +x tools&#x2F;build.sh
&lt;&#x2F;span&gt;&lt;span&gt;	@tools&#x2F;build.sh boot&#x2F;bootsect boot&#x2F;hello boot&#x2F;setup tools&#x2F;kernel Image $(ROOT_DEV)
&lt;&#x2F;span&gt;&lt;span&gt;	@rm system.tmp
&lt;&#x2F;span&gt;&lt;span&gt;	@rm tools&#x2F;kernel -f
&lt;&#x2F;span&gt;&lt;span&gt;	@sync
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Update the Image &lt;em&gt;prerequisites&lt;&#x2F;em&gt; and add hello to the &lt;code&gt;tools&#x2F;build.sh &lt;&#x2F;code&gt;parameter.&lt;&#x2F;p&gt;
&lt;p&gt;Thirdly, revise the &lt;code&gt;tools&#x2F;build.sh&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;# build.sh -- a shell version of build.c for the new bootsect.s &amp;amp; setup.s
&lt;&#x2F;span&gt;&lt;span&gt;# author: falcon &amp;lt;wuzhangjin@gmail.com&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;# update: 2008-10-10
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;bootsect=$1
&lt;&#x2F;span&gt;&lt;span&gt;hello=$2
&lt;&#x2F;span&gt;&lt;span&gt;setup=$3
&lt;&#x2F;span&gt;&lt;span&gt;system=$4
&lt;&#x2F;span&gt;&lt;span&gt;IMAGE=$5
&lt;&#x2F;span&gt;&lt;span&gt;root_dev=$6
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Set the biggest sys_size
&lt;&#x2F;span&gt;&lt;span&gt;# Changes from 0x20000 to 0x30000 by tigercn to avoid oversized code.
&lt;&#x2F;span&gt;&lt;span&gt;SYS_SIZE=$((0x3000*16))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# set the default &amp;quot;device&amp;quot; file for root image file
&lt;&#x2F;span&gt;&lt;span&gt;if [ -z &amp;quot;$root_dev&amp;quot; ]; then
&lt;&#x2F;span&gt;&lt;span&gt;	DEFAULT_MAJOR_ROOT=3
&lt;&#x2F;span&gt;&lt;span&gt;	DEFAULT_MINOR_ROOT=1
&lt;&#x2F;span&gt;&lt;span&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;	DEFAULT_MAJOR_ROOT=${root_dev:0:2}
&lt;&#x2F;span&gt;&lt;span&gt;	DEFAULT_MINOR_ROOT=${root_dev:2:3}
&lt;&#x2F;span&gt;&lt;span&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Write bootsect (512 bytes, one sector) to stdout
&lt;&#x2F;span&gt;&lt;span&gt;[ ! -f &amp;quot;$bootsect&amp;quot; ] &amp;amp;&amp;amp; echo &amp;quot;there is no bootsect binary file there&amp;quot; &amp;amp;&amp;amp; exit -1
&lt;&#x2F;span&gt;&lt;span&gt;dd if=$bootsect bs=512 count=1 of=$IMAGE 2&amp;gt;&amp;amp;1 &amp;gt;&#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Write hello(512bytes, one sector) to stdout
&lt;&#x2F;span&gt;&lt;span&gt;[ ! -f &amp;quot;$hello&amp;quot; ] &amp;amp;&amp;amp; echo &amp;quot;there is no hello binary file there&amp;quot; &amp;amp;&amp;amp; exit -1
&lt;&#x2F;span&gt;&lt;span&gt;dd if=$hello seek=1 bs=512 count=1 of=$IMAGE 2&amp;gt;&amp;amp;1 &amp;gt;&#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Write setup(4 * 512bytes, four sectors) to stdout
&lt;&#x2F;span&gt;&lt;span&gt;[ ! -f &amp;quot;$setup&amp;quot; ] &amp;amp;&amp;amp; echo &amp;quot;there is no setup binary file there&amp;quot; &amp;amp;&amp;amp; exit -1
&lt;&#x2F;span&gt;&lt;span&gt;dd if=$setup seek=2 bs=512 count=4 of=$IMAGE 2&amp;gt;&amp;amp;1 &amp;gt;&#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Write system(&amp;lt; SYS_SIZE) to stdout
&lt;&#x2F;span&gt;&lt;span&gt;[ ! -f &amp;quot;$system&amp;quot; ] &amp;amp;&amp;amp; echo &amp;quot;there is no system binary file there&amp;quot; &amp;amp;&amp;amp; exit -1
&lt;&#x2F;span&gt;&lt;span&gt;system_size=`wc -c $system |cut -d&amp;quot; &amp;quot; -f1`
&lt;&#x2F;span&gt;&lt;span&gt;[ $system_size -gt $SYS_SIZE ] &amp;amp;&amp;amp; echo &amp;quot;the system binary is too big&amp;quot; &amp;amp;&amp;amp; exit -1
&lt;&#x2F;span&gt;&lt;span&gt;dd if=$system seek=6 bs=512 count=$((2888-1-1-4)) of=$IMAGE 2&amp;gt;&amp;amp;1 &amp;gt;&#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Set &amp;quot;device&amp;quot; for the root image file
&lt;&#x2F;span&gt;&lt;span&gt;echo -ne &amp;quot;\x$DEFAULT_MINOR_ROOT\x$DEFAULT_MAJOR_ROOT&amp;quot; | dd ibs=1 obs=1 count=2 seek=508 of=$IMAGE conv=notrunc  2&amp;gt;&amp;amp;1 &amp;gt;&#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Remember that at the &lt;code&gt;Makefile&lt;&#x2F;code&gt;, we put the hello as the second parameter, and we also need to update the parameter index of rest.&lt;&#x2F;p&gt;
&lt;p&gt;Link the &lt;code&gt;hello&lt;&#x2F;code&gt; to &lt;code&gt;Image&lt;&#x2F;code&gt;, &lt;strong&gt;order matter!&lt;&#x2F;strong&gt;
We want to put the bootsect, hello, setup and system, so we must follow this order.&lt;&#x2F;p&gt;
&lt;p&gt;The hello contain 512 bytes and occupied 1 sector, that is the &lt;code&gt;bs&lt;&#x2F;code&gt; and &lt;code&gt;count&lt;&#x2F;code&gt; option for.&lt;&#x2F;p&gt;
&lt;p&gt;So far, we insert the hello to new image, and we are ready to boot it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-os-boot&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-os-boot&quot; aria-label=&quot;Anchor link for: how-os-boot&quot;&gt;How OS boot?&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;At &lt;code&gt;boot&#x2F;bootsect.s&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;	ljmp    $BOOTSEG, $_start
&lt;&#x2F;span&gt;&lt;span&gt;_start:
&lt;&#x2F;span&gt;&lt;span&gt;	mov	$BOOTSEG, %ax
&lt;&#x2F;span&gt;&lt;span&gt;	mov	%ax, %ds
&lt;&#x2F;span&gt;&lt;span&gt;	mov	$INITSEG, %ax
&lt;&#x2F;span&gt;&lt;span&gt;	mov	%ax, %es
&lt;&#x2F;span&gt;&lt;span&gt;	mov	$256, %cx
&lt;&#x2F;span&gt;&lt;span&gt;	sub	%si, %si
&lt;&#x2F;span&gt;&lt;span&gt;	sub	%di, %di
&lt;&#x2F;span&gt;&lt;span&gt;	rep
&lt;&#x2F;span&gt;&lt;span&gt;	movsw 
&lt;&#x2F;span&gt;&lt;span&gt;	ljmp	$INITSEG, $go
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Long jump to &lt;code&gt;$BOOTSEG:$_start&lt;&#x2F;code&gt; when OS is loaded by BIOS.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Put &lt;code&gt;$BOOTSEG&lt;&#x2F;code&gt; to &lt;code&gt;%ds&lt;&#x2F;code&gt;, &lt;code&gt;$INITSEG&lt;&#x2F;code&gt; to &lt;code&gt;%es&lt;&#x2F;code&gt; and 256 to &lt;code&gt;%cx&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Zero the &lt;code&gt;%si&lt;&#x2F;code&gt; and &lt;code&gt;%di&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Repeat &lt;code&gt;movsw&lt;&#x2F;code&gt; until &lt;code&gt;%cx&lt;&#x2F;code&gt; is zero (i.e. copy itself to from &lt;code&gt;$BOOTSEG&lt;&#x2F;code&gt; to &lt;code&gt;$INITSEG&lt;&#x2F;code&gt;, total size is 512 bytes).&lt;&#x2F;p&gt;
&lt;p&gt;Because the counter of &lt;code&gt;rep&lt;&#x2F;code&gt; will decrease by 1 after executed, so the &lt;code&gt;movw&lt;&#x2F;code&gt; will execute 256 times!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;movw&lt;&#x2F;code&gt; will move one word (2 bytes in 16-bits CPU) from &lt;code&gt;%ds:%si&lt;&#x2F;code&gt; to &lt;code&gt;%es:%di&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;First step:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;%ds = $BOOTSEG
&lt;&#x2F;span&gt;&lt;span&gt;%si = 0
&lt;&#x2F;span&gt;&lt;span&gt;%es = $INITSEG
&lt;&#x2F;span&gt;&lt;span&gt;%di = 0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Copy from $BOOTSEG:0 to $INITSEG:0
&lt;&#x2F;span&gt;&lt;span&gt;movw
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Second step:
Because the &lt;code&gt;%si&lt;&#x2F;code&gt; and &lt;code&gt;%di&lt;&#x2F;code&gt; will increase by 2 (bytes, one word in 16-bits CPU) after done it. So&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;%ds = $BOOTSEG
&lt;&#x2F;span&gt;&lt;span&gt;%si = 2
&lt;&#x2F;span&gt;&lt;span&gt;%es = $INITSEG
&lt;&#x2F;span&gt;&lt;span&gt;%di = 2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Copy from $BOOTSEG:2 to $INITSEG:2
&lt;&#x2F;span&gt;&lt;span&gt;movw
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After 256 times, the &lt;code&gt;$BOOTSEG:0&lt;&#x2F;code&gt; - &lt;code&gt;$BOOTSEG:256&lt;&#x2F;code&gt; will copy to  &lt;code&gt;$INITSEG:0&lt;&#x2F;code&gt; - &lt;code&gt;$INITSEG:256&lt;&#x2F;code&gt;. That&#x27;s &lt;code&gt;bootsect&lt;&#x2F;code&gt; itself!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Long jump to &lt;code&gt;$INITSEG:$go&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;go:	mov	%cs, %ax 			# after long jump, %cs become $INITSEG
&lt;&#x2F;span&gt;&lt;span&gt;	mov	%ax, %ds
&lt;&#x2F;span&gt;&lt;span&gt;	mov	%ax, %es
&lt;&#x2F;span&gt;&lt;span&gt;# put stack at 0x9ff00.
&lt;&#x2F;span&gt;&lt;span&gt;	mov	%ax, %ss
&lt;&#x2F;span&gt;&lt;span&gt;	mov	$0xFF00, %sp		# arbitrary value &amp;gt;&amp;gt;512
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;Move &lt;code&gt;$INITSEG&lt;&#x2F;code&gt; to &lt;code&gt;%ds&lt;&#x2F;code&gt;, &lt;code&gt;%es&lt;&#x2F;code&gt; and &lt;code&gt;%ss&lt;&#x2F;code&gt;.
After long jump, the &lt;code&gt;%cs&lt;&#x2F;code&gt; will store the last segment it jump, that is &lt;code&gt;$INITSEG&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Put the top of stack &lt;code&gt;%sp&lt;&#x2F;code&gt; to a huge address.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;# load the setup-sectors directly after the bootblock.
&lt;&#x2F;span&gt;&lt;span&gt;# Note that &amp;#39;es&amp;#39; is already set up.
&lt;&#x2F;span&gt;&lt;span&gt;load_setup:
&lt;&#x2F;span&gt;&lt;span&gt;	mov	$0x0000, %dx		# drive 0, head 0
&lt;&#x2F;span&gt;&lt;span&gt;	mov	$0x0002, %cx		# sector 2, track 0
&lt;&#x2F;span&gt;&lt;span&gt;	mov	$0x0200, %bx		# address = 512, in INITSEG
&lt;&#x2F;span&gt;&lt;span&gt;	.equ    AX, 0x0200+SETUPLEN
&lt;&#x2F;span&gt;&lt;span&gt;	mov     $AX, %ax		# service 2, nr of sectors
&lt;&#x2F;span&gt;&lt;span&gt;	int	$0x13			# read it
&lt;&#x2F;span&gt;&lt;span&gt;	jnc	ok_load_setup		# ok - continue
&lt;&#x2F;span&gt;&lt;span&gt;	mov	$0x0000, %dx
&lt;&#x2F;span&gt;&lt;span&gt;	mov	$0x0000, %ax		# reset the diskette
&lt;&#x2F;span&gt;&lt;span&gt;	int	$0x13
&lt;&#x2F;span&gt;&lt;span&gt;	jmp	load_setup
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;In this time, we want to read drive 0 (floppy), from 0 cylinder, 0 track, from &lt;code&gt;2&lt;&#x2F;code&gt;&#x27;th sector and read &lt;code&gt;SETUPLEN&lt;&#x2F;code&gt; sectors, 0 head to memory based on address &lt;code&gt;$INITSEG:$0x0200&lt;&#x2F;code&gt;. (i.e. load the setup in memory)&lt;&#x2F;li&gt;
&lt;li&gt;If successfully read it, &lt;code&gt;%cf&lt;&#x2F;code&gt; will not be set, so that &lt;code&gt;jnc	ok_load_setup&lt;&#x2F;code&gt; will jump to &lt;code&gt;ok_load_setup&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Otherwise, reset the disk and try again.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Reference:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;drive-table&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#drive-table&quot; aria-label=&quot;Anchor link for: drive-table&quot;&gt;&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;INT_13H&quot;&gt;Drive table&lt;&#x2F;a&gt;:&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Register value&lt;&#x2F;th&gt;&lt;th&gt;Meaning&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;DL = 00h&lt;&#x2F;td&gt;&lt;td&gt;1st floppy disk ( &quot;drive A:&quot; )&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DL = 01h&lt;&#x2F;td&gt;&lt;td&gt;2nd floppy disk ( &quot;drive B:&quot; )&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DL = 80h&lt;&#x2F;td&gt;&lt;td&gt;1st hard disk&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DL = 81h&lt;&#x2F;td&gt;&lt;td&gt;2nd hard disk&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DL = e0h&lt;&#x2F;td&gt;&lt;td&gt;CD&#x2F;DVD&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;int-13h-ah-02h-read-sectors-from-drive&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#int-13h-ah-02h-read-sectors-from-drive&quot; aria-label=&quot;Anchor link for: int-13h-ah-02h-read-sectors-from-drive&quot;&gt;INT 13h, AH = 02h: &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;INT_13H&quot;&gt;Read Sectors From Drive&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;Parameter:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Register&lt;&#x2F;th&gt;&lt;th&gt;Meaning&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;AH&lt;&#x2F;td&gt;&lt;td&gt;02h&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;AL&lt;&#x2F;td&gt;&lt;td&gt;Sectors To Read Count&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;CH&lt;&#x2F;td&gt;&lt;td&gt;Cylinder&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;CL&lt;&#x2F;td&gt;&lt;td&gt;Sector&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DH&lt;&#x2F;td&gt;&lt;td&gt;Head&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DL&lt;&#x2F;td&gt;&lt;td&gt;Drive&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;ES:BX&lt;&#x2F;td&gt;&lt;td&gt;Buffer Address Pointer&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;strong&gt;Results:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Register&lt;&#x2F;th&gt;&lt;th&gt;Meaning&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;CF&lt;&#x2F;td&gt;&lt;td&gt;Set On Error, Clear If No Error&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;AH&lt;&#x2F;td&gt;&lt;td&gt;Return Code&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;AL&lt;&#x2F;td&gt;&lt;td&gt;Actual Sectors Read Count&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;int-13h-ah-00h-reset-disk-system&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#int-13h-ah-00h-reset-disk-system&quot; aria-label=&quot;Anchor link for: int-13h-ah-00h-reset-disk-system&quot;&gt;INT 13h, AH = 00h: &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;INT_13H&quot;&gt;Reset Disk System&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;Parameter:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Register&lt;&#x2F;th&gt;&lt;th&gt;Meaning&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;AH&lt;&#x2F;td&gt;&lt;td&gt;00h&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DL&lt;&#x2F;td&gt;&lt;td&gt;Drive (bit 7 set means reset both hard and floppy disks)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;strong&gt;Results:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Register&lt;&#x2F;th&gt;&lt;th&gt;Meaning&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;CF&lt;&#x2F;td&gt;&lt;td&gt;Set on error&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;AH&lt;&#x2F;td&gt;&lt;td&gt;Return Code&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;We can imitate the procedure to...&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;	.equ HELLOLEN, 1		# nr of hello-sectors
&lt;&#x2F;span&gt;&lt;span&gt;	.equ HELLOSEG, 0x0100	# hello starts here
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;go:	mov	%cs, %ax 			# after long jump, %cs become $INITSEG
&lt;&#x2F;span&gt;&lt;span&gt;	mov	%ax, %ds
&lt;&#x2F;span&gt;&lt;span&gt;	mov	%ax, %es
&lt;&#x2F;span&gt;&lt;span&gt;# put stack at 0x9ff00.
&lt;&#x2F;span&gt;&lt;span&gt;	mov	%ax, %ss
&lt;&#x2F;span&gt;&lt;span&gt;	mov	$0xFF00, %sp		# arbitrary value &amp;gt;&amp;gt;512
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;# Lab 2
&lt;&#x2F;span&gt;&lt;span&gt;load_hello:
&lt;&#x2F;span&gt;&lt;span&gt;   mov	$0x0000, %dx		# drive 0, head 0
&lt;&#x2F;span&gt;&lt;span&gt;   mov	$0x0002, %cx		# sector 2, track 0
&lt;&#x2F;span&gt;&lt;span&gt;   mov $HELLOSEG, %ax		# segment
&lt;&#x2F;span&gt;&lt;span&gt;   mov %ax, %es
&lt;&#x2F;span&gt;&lt;span&gt;   mov	$0x0000, %bx		# offset, address = 0x0100
&lt;&#x2F;span&gt;&lt;span&gt;   .equ    AX, 0x0200+HELLOLEN
&lt;&#x2F;span&gt;&lt;span&gt;   mov     $AX, %ax			# service 2, nr of sectors
&lt;&#x2F;span&gt;&lt;span&gt;   int	$0x13				# read it
&lt;&#x2F;span&gt;&lt;span&gt;   jnc	ok_load_hello		# ok - continue
&lt;&#x2F;span&gt;&lt;span&gt;   mov	$0x0000, %dx
&lt;&#x2F;span&gt;&lt;span&gt;   mov	$0x0000, %ax		# reset the diskette
&lt;&#x2F;span&gt;&lt;span&gt;   int	$0x13
&lt;&#x2F;span&gt;&lt;span&gt;   jmp	load_hello
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;ok_load_hello:
&lt;&#x2F;span&gt;&lt;span&gt;   ljmp $HELLOSEG, $0 # Jump to hello
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;OSDI-lab2&#x2F;ejJFhn5.png&quot; alt=&quot; &quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It works!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;lab2-4-multiboot-support&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#lab2-4-multiboot-support&quot; aria-label=&quot;Anchor link for: lab2-4-multiboot-support&quot;&gt;Lab2.4 - Multiboot support&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In this experiment, you need to implement a simple keyboard character reader that when user:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Press ‘1’, it boots the linux-0.11 Image(just like lab1).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Press ‘2’, it boots the hello world program.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;go:	mov	%cs, %ax 			# after long jump, %cs become $INITSEG
&lt;&#x2F;span&gt;&lt;span&gt;	mov	%ax, %ds
&lt;&#x2F;span&gt;&lt;span&gt;	mov	%ax, %es
&lt;&#x2F;span&gt;&lt;span&gt;# put stack at 0x9ff00.
&lt;&#x2F;span&gt;&lt;span&gt;	mov	%ax, %ss
&lt;&#x2F;span&gt;&lt;span&gt;	mov	$0xFF00, %sp		# arbitrary value &amp;gt;&amp;gt;512
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;boot_menu:
&lt;&#x2F;span&gt;&lt;span&gt;   # Print some inane message
&lt;&#x2F;span&gt;&lt;span&gt;   mov	$0x03, %ah		# read cursor pos
&lt;&#x2F;span&gt;&lt;span&gt;   xor	%bh, %bh		# page number
&lt;&#x2F;span&gt;&lt;span&gt;   int	$0x10
&lt;&#x2F;span&gt;&lt;span&gt;   
&lt;&#x2F;span&gt;&lt;span&gt;   mov	$21, %cx		# string length
&lt;&#x2F;span&gt;&lt;span&gt;   mov	$0x000D, %bx		# page 0, attribute 7 (normal)
&lt;&#x2F;span&gt;&lt;span&gt;   #lea	option, %bp
&lt;&#x2F;span&gt;&lt;span&gt;   mov     $option, %bp		# point to message
&lt;&#x2F;span&gt;&lt;span&gt;   mov	$0x1301, %ax		# write string, move cursor
&lt;&#x2F;span&gt;&lt;span&gt;   int	$0x10
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   mov $0x00, %ah
&lt;&#x2F;span&gt;&lt;span&gt;   int $0x16
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   cmp $49, %al				# 1 ascii
&lt;&#x2F;span&gt;&lt;span&gt;   je load_setup
&lt;&#x2F;span&gt;&lt;span&gt;   cmp $50, %al				# 2 ascii
&lt;&#x2F;span&gt;&lt;span&gt;   je load_hello
&lt;&#x2F;span&gt;&lt;span&gt;   jmp boot_menu
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   ...
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;msg1:
&lt;&#x2F;span&gt;&lt;span&gt;	.byte 13,10
&lt;&#x2F;span&gt;&lt;span&gt;	.ascii &amp;quot;Loading system ...&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	.byte 13,10,13,10
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;option:
&lt;&#x2F;span&gt;&lt;span&gt;	.byte 13,10
&lt;&#x2F;span&gt;&lt;span&gt;	.ascii &amp;quot;1) linux, 2) hello&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	.byte 13,10,13,10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;We locate the cursor.&lt;&#x2F;li&gt;
&lt;li&gt;Print the string to show the boot option.&lt;&#x2F;li&gt;
&lt;li&gt;Read the keyboard&lt;&#x2F;li&gt;
&lt;li&gt;Goto &lt;code&gt;load_setup&lt;&#x2F;code&gt; if pressing 1, goto &lt;code&gt;load_hello&lt;&#x2F;code&gt; if pressing 2.&lt;&#x2F;li&gt;
&lt;li&gt;Otherwise, go to &lt;code&gt;boot_menu&lt;&#x2F;code&gt; again.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Reference:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;int-10h-ah-03h-get-cursor-position-and-shape&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#int-10h-ah-03h-get-cursor-position-and-shape&quot; aria-label=&quot;Anchor link for: int-10h-ah-03h-get-cursor-position-and-shape&quot;&gt;INT 10h, AH = 03h: &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;INT_10H&quot;&gt;Get cursor position and shape&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;Parameter:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Register&lt;&#x2F;th&gt;&lt;th&gt;Meaning&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;AH&lt;&#x2F;td&gt;&lt;td&gt;03h&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;BH&lt;&#x2F;td&gt;&lt;td&gt;Page Number&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;strong&gt;Results:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Register&lt;&#x2F;th&gt;&lt;th&gt;Meaning&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;AX = 0&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;CH&lt;&#x2F;td&gt;&lt;td&gt;Start scan line&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;CL&lt;&#x2F;td&gt;&lt;td&gt;End scan line&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DH&lt;&#x2F;td&gt;&lt;td&gt;Row&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DL&lt;&#x2F;td&gt;&lt;td&gt;Column&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;int-10h-ah-13h-write-string&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#int-10h-ah-13h-write-string&quot; aria-label=&quot;Anchor link for: int-10h-ah-13h-write-string&quot;&gt;INT 10h, AH = 13h: &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;INT_10H&quot;&gt;Write string&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;Parameter:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Register&lt;&#x2F;th&gt;&lt;th&gt;Meaning&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;AH&lt;&#x2F;td&gt;&lt;td&gt;13h&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;AL&lt;&#x2F;td&gt;&lt;td&gt;Write mode&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;BH&lt;&#x2F;td&gt;&lt;td&gt;Page Number&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;BL&lt;&#x2F;td&gt;&lt;td&gt;Color&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;CX&lt;&#x2F;td&gt;&lt;td&gt;String length&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DH&lt;&#x2F;td&gt;&lt;td&gt;Row&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DL&lt;&#x2F;td&gt;&lt;td&gt;Column&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;ES:EP&lt;&#x2F;td&gt;&lt;td&gt;Offset of string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;int-16h-ah-00h-read-keystroke&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#int-16h-ah-00h-read-keystroke&quot; aria-label=&quot;Anchor link for: int-16h-ah-00h-read-keystroke&quot;&gt;INT 16h, AH = 00h: &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;INT_16H&quot;&gt;Read keystroke&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;Parameter:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Register&lt;&#x2F;th&gt;&lt;th&gt;Meaning&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;AH&lt;&#x2F;td&gt;&lt;td&gt;00h&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;strong&gt;Results:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Register&lt;&#x2F;th&gt;&lt;th&gt;Meaning&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;AH&lt;&#x2F;td&gt;&lt;td&gt;Scan code of the key pressed down&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;AL&lt;&#x2F;td&gt;&lt;td&gt;ASCII character of the button pressed&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;bios-color&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#bios-color&quot; aria-label=&quot;Anchor link for: bios-color&quot;&gt;&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;BIOS_color_attributes&quot;&gt;BIOS color&lt;&#x2F;a&gt;:&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Hex&lt;&#x2F;th&gt;&lt;th&gt;Color&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;Black&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;Blue&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;Green&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;Cyan&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;Red&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;Magenta&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;Brown&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;Light Gray&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;Dark Gray&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;Light Blue&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;A&lt;&#x2F;td&gt;&lt;td&gt;Light Green&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;B&lt;&#x2F;td&gt;&lt;td&gt;Light Cyan&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;C&lt;&#x2F;td&gt;&lt;td&gt;Light Red&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;D&lt;&#x2F;td&gt;&lt;td&gt;Light Magenta&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;E&lt;&#x2F;td&gt;&lt;td&gt;Yellow&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;F&lt;&#x2F;td&gt;&lt;td&gt;White&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;ascii&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ascii&quot; aria-label=&quot;Anchor link for: ascii&quot;&gt;&lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;ASCII&quot;&gt;ASCII&lt;&#x2F;a&gt;:&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Dec&lt;&#x2F;th&gt;&lt;th&gt;Meaning&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;Line feed (\n)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;49&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;50&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;load_setup:
&lt;&#x2F;span&gt;&lt;span&gt;	mov	$0x0000, %dx		# drive 0, head 0
&lt;&#x2F;span&gt;&lt;span&gt;	mov	$0x0003, %cx		# sector 3, track 0
&lt;&#x2F;span&gt;&lt;span&gt;	mov	$0x0200, %bx		# address = 512, in INITSEG
&lt;&#x2F;span&gt;&lt;span&gt;	.equ    AX, 0x0200+SETUPLEN
&lt;&#x2F;span&gt;&lt;span&gt;	mov     $AX, %ax		# service 2, nr of sectors
&lt;&#x2F;span&gt;&lt;span&gt;	int	$0x13			# read it
&lt;&#x2F;span&gt;&lt;span&gt;	jnc	ok_load_setup		# ok - continue
&lt;&#x2F;span&gt;&lt;span&gt;	mov	$0x0000, %dx
&lt;&#x2F;span&gt;&lt;span&gt;	mov	$0x0000, %ax		# reset the diskette
&lt;&#x2F;span&gt;&lt;span&gt;	int	$0x13
&lt;&#x2F;span&gt;&lt;span&gt;	jmp	load_setup
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;load_hello&lt;&#x2F;code&gt; remain the same, but the setup is located at 3rd sector, so we revise the &lt;code&gt;%cl&lt;&#x2F;code&gt; to 0x03.&lt;&#x2F;p&gt;
&lt;p&gt;It seems that all work are done. However, after making and run it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;OSDI-lab2&#x2F;KB682J1.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Hello runs pretty well.&lt;&#x2F;p&gt;
&lt;p&gt;After press 1, I want to load the setup, but the OS begin to reboot continuously.&lt;&#x2F;p&gt;
&lt;p&gt;It seems that we didn&#x27;t run the &lt;code&gt;ljmp	$SETUPSEG, $0&lt;&#x2F;code&gt;.
Thus, we must continue to trace the rest of code.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;ok_load_setup:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Get disk drive parameters, specifically nr of sectors&#x2F;track
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	mov	$0x00, %dl
&lt;&#x2F;span&gt;&lt;span&gt;	mov	$0x0800, %ax		# AH=8 is get drive parameters
&lt;&#x2F;span&gt;&lt;span&gt;	int	$0x13
&lt;&#x2F;span&gt;&lt;span&gt;	mov	$0x00, %ch
&lt;&#x2F;span&gt;&lt;span&gt;	#seg cs
&lt;&#x2F;span&gt;&lt;span&gt;	mov	%cx, %cs:sectors+0	# %cs means sectors is in %cs
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;Get sectors of track.&lt;&#x2F;li&gt;
&lt;li&gt;Set &lt;code&gt;%ch&lt;&#x2F;code&gt; (&lt;code&gt;%cx[15:8]&lt;&#x2F;code&gt;) to &lt;code&gt;0x00&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Because we boot from floppy (&lt;code&gt;%dl&lt;&#x2F;code&gt; = 0), and its maximum sectors per track will not exceed 256 (18 sectors per track normally), so &lt;code&gt;%cx[7:6]&lt;&#x2F;code&gt; will be &lt;code&gt;0&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Move &lt;code&gt;%cx&lt;&#x2F;code&gt; to &lt;code&gt;sectors&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Reference:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;int-13h-ah-08h-read-drive-parameters&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#int-13h-ah-08h-read-drive-parameters&quot; aria-label=&quot;Anchor link for: int-13h-ah-08h-read-drive-parameters&quot;&gt;INT 13h, AH = 08h: &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;INT_13H&quot;&gt;Read Drive Parameters&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;Parameter:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Register&lt;&#x2F;th&gt;&lt;th&gt;Meaning&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;AH&lt;&#x2F;td&gt;&lt;td&gt;08h&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DL&lt;&#x2F;td&gt;&lt;td&gt;drive index&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;ES:DI&lt;&#x2F;td&gt;&lt;td&gt;set to 0000h:0000h to work around some buggy BIOS&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;strong&gt;Results:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Register&lt;&#x2F;th&gt;&lt;th&gt;Meaning&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;CF&lt;&#x2F;td&gt;&lt;td&gt;Set On Error, Clear If No Error&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;AH&lt;&#x2F;td&gt;&lt;td&gt;Return Code&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DL&lt;&#x2F;td&gt;&lt;td&gt;number of hard disk drives&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DH&lt;&#x2F;td&gt;&lt;td&gt;logical last index of heads = number_of - 1 (because index starts with 0)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;CX&lt;&#x2F;td&gt;&lt;td&gt;[7:6][15:8] logical last index of cylinders = number_of - 1 (because index starts with 0)&lt;br&gt;[5:0] logical last index of sectors per track = number_of (because index starts with 1)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;BL&lt;&#x2F;td&gt;&lt;td&gt;drive type (only AT&#x2F;PS2 floppies)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;ES:DI&lt;&#x2F;td&gt;&lt;td&gt;pointer to drive parameter table (only for floppies)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;ok_load_setup:
&lt;&#x2F;span&gt;&lt;span&gt;   ...
&lt;&#x2F;span&gt;&lt;span&gt;	mov	$SYSSEG, %ax
&lt;&#x2F;span&gt;&lt;span&gt;	mov	%ax, %es		# segment of 0x010000
&lt;&#x2F;span&gt;&lt;span&gt;	call	read_it
&lt;&#x2F;span&gt;&lt;span&gt;	call	kill_motor
&lt;&#x2F;span&gt;&lt;span&gt;   ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Put &lt;code&gt;$SYSSEG&lt;&#x2F;code&gt; in &lt;code&gt;%es&lt;&#x2F;code&gt;, and call read_it.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;read_it:
&lt;&#x2F;span&gt;&lt;span&gt;	mov	%es, %ax
&lt;&#x2F;span&gt;&lt;span&gt;	test	$0x0fff, %ax
&lt;&#x2F;span&gt;&lt;span&gt;die:	jne 	die			# es must be at 64kB boundary
&lt;&#x2F;span&gt;&lt;span&gt;	xor 	%bx, %bx		# bx is starting address within segment
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;TEST&lt;&#x2F;code&gt; &lt;code&gt;0x0fff&lt;&#x2F;code&gt; and &lt;code&gt;0x1000&lt;&#x2F;code&gt;. &lt;code&gt;TEST&lt;&#x2F;code&gt; is bitwise &lt;code&gt;AND&lt;&#x2F;code&gt; and result of &lt;code&gt;TEST&lt;&#x2F;code&gt; is &lt;code&gt;0&lt;&#x2F;code&gt;, &lt;code&gt;ZF&lt;&#x2F;code&gt; is set to &lt;code&gt;1&lt;&#x2F;code&gt;. &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;TEST_(x86_instruction)&quot;&gt;ref&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;JNE&lt;&#x2F;code&gt; will jump when &lt;code&gt;ZF&lt;&#x2F;code&gt; is &lt;code&gt;0&lt;&#x2F;code&gt;, so it will continue executing the next instruction. &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;en.wikibooks.org&#x2F;wiki&#x2F;X86_Assembly&#x2F;Control_Flow#Jump_Instructions&quot;&gt;ref&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Zero &lt;code&gt;%bx&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;rp_read:
&lt;&#x2F;span&gt;&lt;span&gt;	mov 	%es, %ax
&lt;&#x2F;span&gt;&lt;span&gt; 	cmp 	$ENDSEG, %ax		# have we loaded all yet?
&lt;&#x2F;span&gt;&lt;span&gt;	jb	ok1_read
&lt;&#x2F;span&gt;&lt;span&gt;	ret
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;Put &lt;code&gt;%es&lt;&#x2F;code&gt; to &lt;code&gt;%ax&lt;&#x2F;code&gt; (&lt;code&gt;$SYSSEG&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Compare &lt;code&gt;$ENGSEG&lt;&#x2F;code&gt;(&lt;code&gt;0x4000&lt;&#x2F;code&gt;) and &lt;code&gt;%ax&lt;&#x2F;code&gt; (&lt;code&gt;0x1000&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;In AT&amp;amp;T syntax, &lt;code&gt;%ax&lt;&#x2F;code&gt; will subtract &lt;code&gt;$ENGSEG&lt;&#x2F;code&gt;. Result is &lt;code&gt;0xD000&lt;&#x2F;code&gt;. &lt;code&gt;SF&lt;&#x2F;code&gt; and &lt;code&gt;CF&lt;&#x2F;code&gt; will be set. &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;en.wikibooks.org&#x2F;wiki&#x2F;X86_Assembly&#x2F;Control_Flow#Comparison_Instructions&quot;&gt;ref&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Because &lt;code&gt;jb&lt;&#x2F;code&gt; will jump when &lt;code&gt;CF&lt;&#x2F;code&gt; is 1, so jump to &lt;code&gt;ok1_read&lt;&#x2F;code&gt;. &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;en.wikibooks.org&#x2F;wiki&#x2F;X86_Assembly&#x2F;Control_Flow#Jump_Instructions&quot;&gt;ref&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Otherwise, return to last callee.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;sread:	.word 1+ SETUPLEN	# sectors read of current track
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;ok1_read:
&lt;&#x2F;span&gt;&lt;span&gt;	#seg cs
&lt;&#x2F;span&gt;&lt;span&gt;	mov	%cs:sectors+0, %ax
&lt;&#x2F;span&gt;&lt;span&gt;	sub	sread, %ax
&lt;&#x2F;span&gt;&lt;span&gt;	mov	%ax, %cx
&lt;&#x2F;span&gt;&lt;span&gt;	shl	$9, %cx
&lt;&#x2F;span&gt;&lt;span&gt;	add	%bx, %cx
&lt;&#x2F;span&gt;&lt;span&gt;	jnc 	ok2_read
&lt;&#x2F;span&gt;&lt;span&gt;	je 	ok2_read
&lt;&#x2F;span&gt;&lt;span&gt;	xor 	%ax, %ax
&lt;&#x2F;span&gt;&lt;span&gt;	sub 	%bx, %ax
&lt;&#x2F;span&gt;&lt;span&gt;	shr 	$9, %ax
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;Move &lt;code&gt;sectors&lt;&#x2F;code&gt; to &lt;code&gt;%ax&lt;&#x2F;code&gt; and subtract &lt;code&gt;sread&lt;&#x2F;code&gt;. That is un-read sectors.&lt;&#x2F;li&gt;
&lt;li&gt;Calculate the total bytes of un-read sectors (512 bytes per sector)  to &lt;code&gt;%cx&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;If not greater or eqaul to $2^{16}$ (maximum register capacity), goto &lt;code&gt;ok2_read&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Otherwise, count the maximum sectors can read (&lt;code&gt;%ax&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;ok2_read:
&lt;&#x2F;span&gt;&lt;span&gt;	call 	read_track
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;read_track:
&lt;&#x2F;span&gt;&lt;span&gt;	push	%ax
&lt;&#x2F;span&gt;&lt;span&gt;	push	%bx
&lt;&#x2F;span&gt;&lt;span&gt;	push	%cx
&lt;&#x2F;span&gt;&lt;span&gt;	push	%dx
&lt;&#x2F;span&gt;&lt;span&gt;	mov	track, %dx
&lt;&#x2F;span&gt;&lt;span&gt;	mov	sread, %cx
&lt;&#x2F;span&gt;&lt;span&gt;	inc	%cx
&lt;&#x2F;span&gt;&lt;span&gt;	mov	%dl, %ch
&lt;&#x2F;span&gt;&lt;span&gt;	mov	head, %dx
&lt;&#x2F;span&gt;&lt;span&gt;	mov	%dl, %dh
&lt;&#x2F;span&gt;&lt;span&gt;	mov	$0, %dl
&lt;&#x2F;span&gt;&lt;span&gt;	and	$0x0100, %dx
&lt;&#x2F;span&gt;&lt;span&gt;	mov	$2, %ah
&lt;&#x2F;span&gt;&lt;span&gt;	int	$0x13
&lt;&#x2F;span&gt;&lt;span&gt;	jc	bad_rt
&lt;&#x2F;span&gt;&lt;span&gt;	pop	%dx
&lt;&#x2F;span&gt;&lt;span&gt;	pop	%cx
&lt;&#x2F;span&gt;&lt;span&gt;	pop	%bx
&lt;&#x2F;span&gt;&lt;span&gt;	pop	%ax
&lt;&#x2F;span&gt;&lt;span&gt;	ret
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;Store all register.&lt;&#x2F;li&gt;
&lt;li&gt;In this time, we want to read drive 0 (floppy), from 0 cylinder, 0 track, from &lt;code&gt;1+SETUPLEN+1&lt;&#x2F;code&gt;&#x27;th sector and read &lt;code&gt;%al&lt;&#x2F;code&gt; un-read sectors, 0 head to memory based on address &lt;code&gt;$SYSSEG:0x0000&lt;&#x2F;code&gt;. (i.e. load the system in memory)&lt;&#x2F;li&gt;
&lt;li&gt;If failed, &lt;code&gt;%cf&lt;&#x2F;code&gt; will be set, so that &lt;code&gt;jc	bad_rt&lt;&#x2F;code&gt; will jump to &lt;code&gt;bad_rt&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Load all registers.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;At this very moment, we have already known the error may come from here. Because the system is located at &lt;code&gt;1 + 1 + 1 + SETUPLEN&lt;&#x2F;code&gt;, so we &lt;strong&gt;must&lt;&#x2F;strong&gt; change &lt;code&gt;sread&lt;&#x2F;code&gt; to &lt;code&gt;1 + 1 + SETUPLEN&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Reference:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;int-13h-ah-02h-read-sectors-from-drive-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#int-13h-ah-02h-read-sectors-from-drive-1&quot; aria-label=&quot;Anchor link for: int-13h-ah-02h-read-sectors-from-drive-1&quot;&gt;INT 13h, AH = 02h: &lt;a rel=&quot;noreferrer&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;INT_13H&quot;&gt;Read Sectors From Drive&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;Parameter:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Register&lt;&#x2F;th&gt;&lt;th&gt;Meaning&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;AH&lt;&#x2F;td&gt;&lt;td&gt;02h&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;AL&lt;&#x2F;td&gt;&lt;td&gt;Sectors To Read Count&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;CH&lt;&#x2F;td&gt;&lt;td&gt;Cylinder&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;CL&lt;&#x2F;td&gt;&lt;td&gt;Sector&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DH&lt;&#x2F;td&gt;&lt;td&gt;Head&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DL&lt;&#x2F;td&gt;&lt;td&gt;Drive&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;ES:BX&lt;&#x2F;td&gt;&lt;td&gt;Buffer Address Pointer&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;strong&gt;Results:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Register&lt;&#x2F;th&gt;&lt;th&gt;Meaning&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;CF&lt;&#x2F;td&gt;&lt;td&gt;Set On Error, Clear If No Error&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;AH&lt;&#x2F;td&gt;&lt;td&gt;Return Code&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;AL&lt;&#x2F;td&gt;&lt;td&gt;Actual Sectors Read Count&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;After change &lt;code&gt;sread&lt;&#x2F;code&gt; to &lt;code&gt; 1 + 1 + SETUP&lt;&#x2F;code&gt;, it works!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;OSDI-lab2&#x2F;WGZwVkx.png&quot; alt=&quot; &quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;questions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#questions&quot; aria-label=&quot;Anchor link for: questions&quot;&gt;Questions&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;What’s the meaning of ljmp $BOOTSEG, $_start(boot&#x2F;bootsect.s)? What is the memory address of the beginning of bootsect.s? What is the value of $_start? From above questions, could you please clearly explain how do you jump to the beginning of hello image?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;   objdump -D -mi386 -Maddr16,data16 boot&#x2F;bootsect.o
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;OSDI-lab2&#x2F;lDWVVAr.png&quot; alt=&quot; &quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;What’s the purpose of es register when the cpu is performing int $0x13 with AH=0x2h?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;base segment of memory address that put read sectors&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Please change the Hello program’s font color to another&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Change &lt;code&gt;%bl&lt;&#x2F;code&gt; register.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;If we would like to swap the position of hello and setup in the Image. Where do we need to modify in tools&#x2F;build.sh and bootsect.s?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The order of Image at &lt;code&gt;tools&#x2F;build.sh&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;The starting sector want to read when perform int 13h with AH=02h.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Please trace the SeaBIOS code. What are the first and the last instruction of the SeaBIOS? Where are they?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;First instruction: &lt;code&gt;reset_vector&lt;&#x2F;code&gt; @ &lt;code&gt;src&#x2F;romlayout.S&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Last instruction:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;call_boot_entry&lt;&#x2F;code&gt; @ &lt;code&gt;src&#x2F;boot.c&lt;&#x2F;code&gt; in C&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;__farcall16&lt;&#x2F;code&gt; @ &lt;code&gt;src&#x2F;romlayout.S&lt;&#x2F;code&gt; in asm&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</description>
      </item>
    </channel>
</rss>
